@page "/gun-configurator"
@using Microsoft.JSInterop
@using MudExtensions
@using TarkovDataOrganizer

<script>
    function getSelectedValues(selectId) {
        var select = document.getElementById(selectId);
        if (select) {
            var selectedValues = [];
            for (var i = 0; i < select.options.length; i++) {
                if (select.options[i].selected) {
                    selectedValues.push(select.options[i].value);
                }
            }
            return selectedValues;
        } else {
            console.error(`Element with id ${selectId} not found.`);
            return [];
        }
    }

    function toggleSelection(rowId) {
        var row = document.getElementById(rowId);
        row.classList.toggle('selected');

        var selectedValues = [];
        var selectedRows = document.querySelectorAll('.weapon-row.selected');
        selectedRows.forEach(row => {
            selectedValues.push(row.getAttribute('data-value'));
        });

        DotNet.invokeMethodAsync('YourAssemblyName', 'UpdateSelectedWeapons', selectedValues);
    }
</script>

<style>
    .weapon-image-container {
        display: flex;
        flex-direction: column;
        height: 100px;
        overflow-y: scroll;
    }

    .weapon-image {
        width: 50px;
        height: 50px;
        margin: 5px;
    }

    .weapon-table {
        width: 100%;
    }

    .weapon-table-td {
        height: 79px;
        display: flex;
        overflow-y: scroll;
    }

    .weapon-row {
        cursor: pointer;
    }

        .weapon-row.selected {
            background-color: #d3d3d3; /* Highlight selected row */
        }
</style>

<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{
    <MudSplitter>
        <StartContent>
            <div style="padding: 16px;">
                <table>
                    <thead>
                        <tr>
                            <th>Category</th>
                            <th>Weapon</th>
                            <th>Caliber</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <MudSelect T="string" Label="Select Categories" Variant="Variant.Filled" @bind-Value="SelectedCategory" @bind-SelectedValues="SelectedCategories" MultiSelection="true" OnClose="OnSelectedCategoryChanged">
                                    @foreach (var category in Categories)
                                    {
                                        <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                            <td class="weapon-table-td">
                                <table class="weapon-table">
                                    @foreach (var weapon in FilteredWeaponNames)
                                    {
                                        <tr id="weapon-@weapon.shortName" class="weapon-row" data-value="@weapon.name" @onclick="() => OnWeaponRowClicked(weapon)">
                                            <td>
                                                <img src="@weapon.defaultPresetGridImageLink" alt="@weapon.shortName" class="weapon-image" />
                                                @weapon.shortName
                                            </td>
                                        </tr>
                                    }
                                </table>
                            </td>
                            <td>
                                <MudSelect T="string" Label="Select Caliber" Variant="Variant.Filled" @bind-Value="SelectedCaliber" @bind-SelectedValues="SelectedCalibers" id="caliberSelect" MultiSelection="true" OnClose="OnSelectedCaliberChanged">
                                    @foreach (var caliber in Calibers)
                                    {
                                        <MudSelectItem T="string" Value="@caliber">@caliber</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </StartContent>
        <EndContent>
            <div style="padding: 16px;">
                <table>
                    <thead>
                        <tr>
                            @if (SelectedWeapon != null)
                            {
                                <th>Attachments</th>
                                <th>Recoil</th>
                                <th>Velocity</th>
                                <th>Base Price</th>
                                <th>Accuracy Modifier</th>
                                <th>Weight</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @if (SelectedWeapon != null)
                            {
                                <td>
                                    <MudSelect T="string" @bind-Value="SelectedAttachment" Variant="Variant.Filled" InputId="attachmentSelect">
                                        @if (SelectedWeapon != null)
                                        {
                                            @foreach (var slot in AvailableSlots)
                                            {
                                                <MudSelectItem Value="@slot.AllowedItemId">@slot.SlotName: @slot.AllowedItemName</MudSelectItem>
                                            }
                                        }
                                    </MudSelect>

                                </td>
                                <td>
                                    <MudSelect T="float" @bind-Value="SelectedVerticalRecoil" @bind-SelectedValues="SelectedVerticalRecoils" Variant="Variant.Filled" InputId="recoilVerticalSelect" MultiSelection="true">
                                        @if (SelectedWeapon != null)
                                        {
                                            if (!SelectedVerticalRecoils.Contains(SelectedWeapon.recoilVertical))
                                            {
                                                SelectedVerticalRecoils = SelectedVerticalRecoils.Append(SelectedWeapon.recoilVertical);
                                            }
                                            <MudSelectItem Value="@SelectedWeapon.recoilVertical">Recoil V: @SelectedWeapon.recoilVertical</MudSelectItem>
                                        }
                                    </MudSelect>
                                </td>
                                <td>
                                    <MudSelect @bind-Value="SelectedVelocity" Variant="Variant.Filled" InputId="velocitySelect" MultiSelection="true">
                                        @if (SelectedWeapon != null)
                                        {
                                            <MudSelectItem Value="@SelectedWeapon.velocity">Velocity: @SelectedWeapon.velocity</MudSelectItem>
                                        }
                                    </MudSelect>
                                </td>
                                <td>
                                    <MudSelect @bind-Value="SelectedBasePrice" Variant="Variant.Filled" InputId="basePriceSelect" MultiSelection="true">
                                        @if (SelectedWeapon != null)
                                        {
                                            <MudSelectItem Value="@SelectedWeapon.basePrice">Base Price: @SelectedWeapon.basePrice.ToString("C0")</MudSelectItem>
                                        }
                                    </MudSelect>
                                </td>
                                <td>
                                    <select id="accuracyModifierSelect" multiple @onchange="OnSelectedAccuracyModifierChanged">
                                        @if (SelectedWeapon != null)
                                        {
                                            <option value="@SelectedWeapon.accuracyModifier">Accuracy Modifier: @SelectedWeapon.accuracyModifier</option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select id="weightSelect" multiple @onchange="OnSelectedWeightChanged">
                                        @if (SelectedWeapon != null)
                                        {
                                            <option value="@SelectedWeapon.weight">Weight: @SelectedWeapon.weight</option>
                                        }
                                    </select>
                                </td>
                            }
                        </tr>
                    </tbody>
                </table>

                @if (SelectedWeapon != null)
                {
                    <div id="weaponDisplay">
                        <h3>@SelectedWeapon.name</h3>
                        <img id="weaponImage" src="@SelectedWeapon.defaultPresetBaseImageLink" alt="Selected Weapon Image" />
                        <p>Recoil Vertical: @SelectedWeapon.recoilVertical</p>
                        <p>Recoil Horizontal: @SelectedWeapon.recoilHorizontal</p>
                        <p>Velocity: @SelectedWeapon.velocity</p>
                        <p>Base Price: @SelectedWeapon.basePrice</p>
                        <p>Accuracy Modifier: @SelectedWeapon.accuracyModifier</p>
                        <p>Weight: @SelectedWeapon.weight</p>
                    </div>
                }
            </div>
        </EndContent>
    </MudSplitter>
}

@code {
    private List<string> Calibers = new List<string>();
    private List<float> RecoilVerticals = new List<float>();
    public List<string> SelectedWeapons { get; set; } = new List<string>();
    public string? SelectedCategory { get; set; }
    public string? SelectedAttachment { get; set; }
    public string? SelectedCaliber { get; set; }
    public IEnumerable<string> SelectedCategories { get; set; } = new List<string>();
    public IEnumerable<string> SelectedCalibers { get; set; } = new List<string>();
    public IEnumerable<float> SelectedVerticalRecoils { get; set; } = new List<float>();
    public float SelectedVerticalRecoil { get; set; }
    public float SelectedVelocity { get; set; }
    public int SelectedBasePrice { get; set; }
    public float SelectedAccuracyModifier { get; set; }
    public float SelectedWeight { get; set; }
    public TarkovData.TarkovItem? SelectedWeapon { get; set; }
    public List<string> Categories { get; set; } = new();
    public class DisplaySlot
    {
        public string ItemId { get; set; }
        public string SlotId { get; set; }
        public string SlotName { get; set; }
        public string AllowedItemId { get; set; }
        public string AllowedItemName { get; set; }
    }


    private List<DisplaySlot> AvailableSlots { get; set; } = new List<DisplaySlot>();

    private void UpdateAvailableSlots(TarkovData.TarkovItem selectedWeapon)
    {
        AvailableSlots.Clear();

        if (selectedWeapon != null && TarkovData.TarkovItem.DataTableSlots.TryGetValue(selectedWeapon.id, out var weaponSlots))
        {
            foreach (var slot in weaponSlots.Values)
            {
                foreach (var allowedId in slot.allowedIDs)
                {
                    var allowedItem = TarkovData.TarkovItem.DataTable.GetValueOrDefault(allowedId);
                    if (allowedItem != null)
                    {
                        AvailableSlots.Add(new DisplaySlot
                            {
                                ItemId = slot.itemId,
                                SlotId = slot.slotId,
                                SlotName = slot.name,
                                AllowedItemId = allowedItem.id,
                                AllowedItemName = allowedItem.name
                            });
                    }
                }
            }
        }
    }


    private void OnWeaponRowClicked(TarkovData.TarkovItem weapon)
    {
        SelectedWeapons = new List<string> { weapon.name };
        SelectedWeapon = weapon;
        UpdateAvailableSlots(SelectedWeapon); // Update available slots
        StateHasChanged();
    }




    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();
            Calibers = TarkovData.TarkovItem.GetDistinctCalibers();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private IEnumerable<TarkovData.TarkovItem> FilteredWeaponNames =>
        !SelectedCategories.Any()
            ? TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase))
            : TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase) &&
                               SelectedCategories.Contains(item.categoryName));

    private void OnSelectedCategoryChanged()
    {
        SelectedWeapons.Clear(); // Clear selected weapons to refresh the list
        StateHasChanged(); // Ensure the state is updated
        Console.WriteLine($"SelectedCategories changed to: {string.Join(", ", SelectedCategories)}");
    }

    private async Task OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapons = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weaponSelect");
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        Console.WriteLine($"SelectedWeapons changed to: {string.Join(", ", SelectedWeapons)}");
    }

    private async Task OnSelectedCaliberChanged()
    {
        SelectedCalibers = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "caliberSelect");
        Console.WriteLine($"SelectedCalibers changed to: {string.Join(", ", SelectedCalibers)}");
    }

    private async Task OnSelectedRecoilVerticalChanged()
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "recoilVerticalSelect");
        SelectedVerticalRecoils = selectedValues.Select(float.Parse);
        Console.WriteLine($"SelectedRecoilVerticals changed to: {string.Join(", ", SelectedVerticalRecoils)}");
    }

    private async Task OnSelectedVelocityChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "velocitySelect");
        if (selectedValues.Any())
        {
            SelectedVelocity = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedVelocity changed to: {SelectedVelocity}");
    }

    private async Task OnSelectedBasePriceChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "basePriceSelect");
        if (selectedValues.Any())
        {
            SelectedBasePrice = int.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedBasePrice changed to: {SelectedBasePrice}");
    }

    private async Task OnSelectedAccuracyModifierChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "accuracyModifierSelect");
        if (selectedValues.Any())
        {
            SelectedAccuracyModifier = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedAccuracyModifier changed to: {SelectedAccuracyModifier}");
    }

    private async Task OnSelectedWeightChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weightSelect");
        if (selectedValues.Any())
        {
            SelectedWeight = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedWeight changed to: {SelectedWeight}");
    }

    [JSInvokable]
    public void UpdateSelectedWeapons(List<string> selectedWeapons)
    {
        SelectedWeapons = selectedWeapons;
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        StateHasChanged();
    }
}
