@page "/gun-configurator"
@using Microsoft.JSInterop
@using MudExtensions
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using System.Text
@using TarkovDataOrganizer
@using static TarkovDataOrganizer.TarkovData

<script>
    function getSelectedValues(selectId) {
        var select = document.getElementById(selectId);
        if (select) {
            var selectedValues = [];
            for (var i = 0; i < select.options.length; i++) {
                if (select.options[i].selected) {
                    selectedValues.push(select.options[i].value);
                }
            }
            return selectedValues;
        } else {
            console.error(`Element with id ${selectId} not found.`);
            return [];
        }
    }

    function toggleSelection(rowId) {
        var row = document.getElementById(rowId);
        row.classList.toggle('selected');

        var selectedValues = [];
        var selectedRows = document.querySelectorAll('.weapon-row.selected');
        selectedRows.forEach(row => {
            selectedValues.push(row.getAttribute('data-value'));
        });

        DotNet.invokeMethodAsync('YourAssemblyName', 'UpdateSelectedWeapons', selectedValues);
    }
</script>
<script>
    window.BlazorDownloadFile = (fileName, contentType, content) => {
        const a = document.createElement('a');
        const file = new Blob([content], { type: contentType });
        a.href = URL.createObjectURL(file);
        a.download = fileName;
        a.click();
    };
</script>

<style>

    .weapon-default-image {
        width: 100%; /* Ensure it takes up the full width of the container */
        height: auto; /* Maintain the aspect ratio */
        max-width: 200px; /* Adjust as needed to fit within your layout */
        display: block; /* Ensure the image is treated as a block element */
        margin: 0 auto; /* Center the image if needed */
    }

    .weapon-image-container {
        display: flex;
        flex-direction: column;
        height: 100px;
        overflow-y: scroll;
    }

    .weapon-image {
        width: 50px;
        height: 50px;
        margin: 5px;
    }

    .weapon-table {
        width: 100%;
    }

    .weapon-table-td {
        height: 79px;
        display: flex;
        overflow-y: scroll;
    }

    .weapon-row {
        cursor: pointer;
    }

        .weapon-row.selected {
            background-color: #d3d3d3; /* Highlight selected row */
        }

    .scrollable-container {
        max-height: 150px; /* Adjust the height as needed */
        overflow-y: auto;
        border: 1px solid #ccc; /* Optional: Adds a border around the container */
        padding: 8px; /* Optional: Adds padding inside the container */
        margin-bottom: 16px; /* Optional: Adds space between containers */
    }

        .scrollable-container ul {
            list-style-type: none; /* Removes bullet points from the list */
            padding: 0; /* Removes default padding */
            margin: 0; /* Removes default margin */
        }

        .scrollable-container li {
            margin: 4px 0; /* Optional: Adds space between list items */
        }
</style>

<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{
    <MudDrawerContainer>
        <MudDrawer Open="@isDrawerOpen" Anchor="Anchor.End" Variant="DrawerVariant.Temporary" Elevation="5" Style="padding: 10px;">
            @if (SelectedCombination != null)
            {
                <h3>@SelectedWeapon?.name</h3>
                <img id="weaponImage-@SelectedWeapon?.name" src="@SelectedWeapon?.defaultPresetBaseImageLink" alt="Selected Weapon Image" style="width: 100%; height: auto;" />
                <p>Recoil Vertical: @SelectedCombination.RecoilVertical</p>
                <p>Ergonomics: @SelectedCombination.Ergonomics</p>
                <p>Velocity: @SelectedCombination.Velocity</p>
                <p>Base Price: @SelectedCombination.BasePrice</p>
                <p>Accuracy Modifier: @SelectedCombination.AccuracyModifier</p>
                <p>Weight: @SelectedCombination.Weight</p>

                @foreach (var slotGroup in SelectedCombination.SlotGroups)
                {
                    <div style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <strong>@slotGroup.Key:</strong>
                        </div>
                        <div style="margin-left: 10px;">
                            @if (slotGroup.Value.Any())
                            {
                                @foreach (var attachment in slotGroup.Value)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 10px;">
                                        <img src="@attachment.gridImageLink" alt="@attachment.name" style="width: 50px; height: 50px; margin-right: 10px;" />
                                        <span>@attachment.name</span>
                                        <span style="margin-left: 10px;">
                                            Recoil Mod: @attachment.recoilModifier,
                                            Ergo Mod: @attachment.ergonomicsModifier,
                                            Velocity: @attachment.velocity,
                                            Weight: @attachment.weight
                                        </span>
                                    </div>

                                    @if (attachment.HasSubSlots())
                                    {
                                        <MudTreeView T="string">
                                            @foreach (var subslot in attachment.GetSubSlots())
                                            {
                                                var subslotItem = TarkovData.TarkovItem.DataTable.GetValueOrDefault(subslot.allowedIDs.FirstOrDefault());
                                                if (subslotItem != null)
                                                {
                                                    var slotType = subslot.name; // Retrieve the slot type
                                                    <MudTreeViewItem T="string" Text="@slotType">
                                                        <div>
                                                            <div style="margin-left: 10px;">
                                                                <div style="display: flex; align-items: center; margin-top: 10px;">
                                                                    <img src="@subslotItem.gridImageLink" alt="@subslotItem.name" class="weapon-image" />
                                                                    <span>@subslotItem.name</span>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </MudTreeViewItem>
                                                }
                                            }
                                        </MudTreeView>
                                    }
                                }
                            }
                            else
                            {
                                <div style="display: flex; align-items: center; margin-top: 10px;">
                                    <span style="color: gray;">(Empty Slot)</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </MudDrawer>
    </MudDrawerContainer>

    <div style="padding: 16px;">
        <div>
            <table>
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Weapon</th>
                        <th>Caliber</th>
                        <th>Attachments</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <MudSelect T="string" Label="Select Categories" Variant="Variant.Filled" @bind-Value="SelectedCategory" @bind-SelectedValues="SelectedCategories" MultiSelection="true" OnClose="OnSelectedCategoryChanged">
                                @foreach (var category in Categories)
                                {
                                    <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        <td class="weapon-table-td">
                            <table class="weapon-table">
                                @foreach (var weapon in FilteredWeaponNames)
                                {
                                    <tr id="weapon-@weapon.shortName" class="weapon-row" data-value="@weapon.name" @onclick="() => OnWeaponRowClicked(weapon)">
                                        <td>
                                            <img src="@weapon.defaultPresetGridImageLink" alt="@weapon.shortName" class="weapon-image" />
                                            @weapon.shortName
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>
                        <td>
                            <MudSelect T="string"
                                       Label="Select Caliber"
                                       Variant="Variant.Filled"
                                       @bind-SelectedValues="SelectedCalibers"
                                       MultiSelection="true"
                                       OnClose="OnSelectedCaliberChanged">
                                @foreach (var caliber in Calibers)
                                {
                                    <MudSelectItem T="string" Value="@caliber">@caliber</MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        @if (SelectedWeapon != null)
                        {
                            <td>
                                <MudSelect T="string" @bind-Value="SelectedAttachment" Variant="Variant.Filled" InputId="attachmentSelect">
                                    @foreach (var slot in AvailableSlots)
                                    {
                                        <MudSelectItem Value="@slot.AllowedItemId">@slot.SlotName: @slot.AllowedItemName</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        <div>
            <table>
                <thead>
                    <tr>
                        @if (SelectedWeapon != null)
                        {
                            <th>Attributes</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (SelectedWeapon != null)
                    {
                        <tr>
                            <td>
                                <small>
                                    Recoil Vertical Range:
                                    <span>@VerticalRecoilMin</span> - <span>@VerticalRecoilMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Ergonomics Range:
                                    <span>@ErgonomicsMin</span> - <span>@ErgonomicsMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Velocity Range:
                                    <span>@VelocityMin</span> - <span>@VelocityMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Base Price Range:
                                    <span>@BasePriceMin</span> - <span>@BasePriceMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Accuracy Modifier Range:
                                    <span>@AccuracyModifierMin</span> - <span>@AccuracyModifierMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Weight Range:
                                    <span>@WeightMin</span> - <span>@WeightMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Fire Rate Range:
                                    <span>@FireRateMin</span> - <span>@FireRateMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Center of Impact Range:
                                    <span>@CenterOfImpactMin</span> - <span>@CenterOfImpactMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Deviation Curve Range:
                                    <span>@DeviationCurveMin</span> - <span>@DeviationCurveMax</span>
                                </small>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <small>
                                    Deviation Max Range:
                                    <span>@DeviationMaxMin</span> - <span>@DeviationMaxMax</span>
                                </small>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (SelectedWeapon != null)
        {
            var totalCombinations = TarkovData.TarkovItem.GenerateUniqueCombinations(SelectedWeapon);
            int pageSize = 20;

            <MudDataGrid T="TarkovData.TarkovItem.WeaponCombination" ServerData="LoadServerData" RowsPerPage="20" Height="45vh" Filterable="true" SortMode="SortMode.Multiple" Dense="false" Hover="true" Bordered="true" Striped="true">
                <Columns>
                    <!-- Recoil Vertical and Ergonomics Columns remain unchanged -->
                    <!-- Recoil Column showing Vertical - Horizontal -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Recoil (Vertical - Horizontal)">
                        <CellTemplate>
                            <span>@context.Item.RecoilVertical - @context.Item.RecoilHorizontal</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Ergonomics" Title="Ergonomics" />
                    <!-- Add New Column for Stacked Combos -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Stacked Combos">
                        <CellTemplate>
                            <span>@context.Item.TotalCombinations</span>
                        </CellTemplate>
                    </TemplateColumn>
                    <!-- Velocity Column showing Min - Max -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Velocity">
                        <CellTemplate>
                            @{
                                var velocityMin = context.Item.SlotGroups.Min(group => group.Value.Min(item => item.velocity));
                                var velocityMax = context.Item.SlotGroups.Max(group => group.Value.Max(item => item.velocity));
                            }
                            <span>@velocityMin - @velocityMax</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <!-- Accuracy Modifier Column showing Min - Max -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Accuracy Modifier">
                        <CellTemplate>
                            @{
                                var accuracyModifierMin = context.Item.SlotGroups.Min(group => group.Value.Min(item => item.accuracyModifier));
                                var accuracyModifierMax = context.Item.SlotGroups.Max(group => group.Value.Max(item => item.accuracyModifier));
                            }
                            <span>@accuracyModifierMin - @accuracyModifierMax</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <!-- Weight Column showing Min - Max -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Weight">
                        <CellTemplate>
                            @{
                                var weightMin = context.Item.SlotGroups.Min(group => group.Value.Min(item => item.weight));
                                var weightMax = context.Item.SlotGroups.Max(group => group.Value.Max(item => item.weight));
                            }
                            <span>@weightMin - @weightMax</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <!-- Avg. 24h Price Column showing Min - Max -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Avg. 24h Price">
                        <CellTemplate>
                            @{
                                var avg24hPriceMin = context.Item.SlotGroups.Min(group => group.Value.Min(item => item.avg24hPrice));
                                var avg24hPriceMax = context.Item.SlotGroups.Max(group => group.Value.Max(item => item.avg24hPrice));
                            }
                            <span>@avg24hPriceMin - @avg24hPriceMax</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <!-- Low 24h Price Column showing Min - Max -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Low 24h Price">
                        <CellTemplate>
                            @{
                                var low24hPriceMin = context.Item.SlotGroups.Min(group => group.Value.Min(item => item.low24hPrice));
                                var low24hPriceMax = context.Item.SlotGroups.Max(group => group.Value.Max(item => item.low24hPrice));
                            }
                            <span>@low24hPriceMin - @low24hPriceMax</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <!-- New Column to Show Attachment Count -->
                    <!-- Attachment Count Column, now sortable -->
                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Attachment Count" Sortable="true" SortBy="@(x => x.SlotGroups.Sum(group => group.Value.Count))">
                        <CellTemplate>
                            @{
                                // Calculate the total count of attachments for the combination
                                var attachmentCount = context.Item.SlotGroups.Sum(group => group.Value.Count);
                            }
                            <span>@attachmentCount</span>
                        </CellTemplate>
                    </TemplateColumn>

                    <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination">
                        <CellTemplate>
                            <MudButton OnClick="() => HandleCombinationSelection(context.Item)">
                                Select This Combination
                            </MudButton>
                            <!-- New button to export the selected row and its combinations -->
                            <MudButton Color="Color.Info" OnClick="() => ExportCombination(context.Item)">
                                Export
                            </MudButton>
                            <MudText Typo="Typo.body1">
                                @ExportedCombinationText
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager />
                </PagerContent>
            </MudDataGrid>
        }
    </div>
}

@code {
    private List<string> Calibers = new List<string>();
    private List<float> RecoilVerticals = new List<float>();
    public List<string> SelectedWeapons { get; set; } = new List<string>();
    public string? SelectedCategory { get; set; }
    public string? SelectedAttachment { get; set; }
    public string? SelectedCaliber { get; set; }
    public IEnumerable<string> SelectedCategories { get; set; } = new List<string>();
    public IEnumerable<string> SelectedCalibers { get; set; } = new List<string>();
    public IEnumerable<float> SelectedVerticalRecoils { get; set; } = new List<float>();
    public float SelectedVerticalRecoil { get; set; }
    public float SelectedVelocity { get; set; }
    public int SelectedBasePrice { get; set; }
    public float SelectedAccuracyModifier { get; set; }
    public float SelectedWeight { get; set; }
    public TarkovData.TarkovItem? SelectedWeapon { get; set; }
    public List<string> Categories { get; set; } = new();
    private IEnumerable<float> SelectedWeights { get; set; } = new List<float>();
    private List<DisplaySlot> AvailableSlots { get; set; } = new List<DisplaySlot>();
    private float SelectedErgonomics { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private float SelectedFireRate { get; set; }
    private float SelectedCenterOfImpact { get; set; }
    private float SelectedDeviationCurve { get; set; }
    private float SelectedDeviationMax { get; set; }

    private float VerticalRecoilMin { get; set; }
    private float VerticalRecoilMax { get; set; }

    private float ErgonomicsMin { get; set; }
    private float ErgonomicsMax { get; set; }

    private float VelocityMin { get; set; }
    private float VelocityMax { get; set; }

    private int BasePriceMin { get; set; } = 0;
    private int BasePriceMax { get; set; }

    private float AccuracyModifierMin { get; set; } = 0;
    private float AccuracyModifierMax { get; set; } = 2;

    private float WeightMin { get; set; }
    private float WeightMax { get; set; }

    private float FireRateMin { get; set; }
    private float FireRateMax { get; set; }

    private float CenterOfImpactMin { get; set; }
    private float CenterOfImpactMax { get; set; }

    private float DeviationCurveMin { get; set; }
    private float DeviationCurveMax { get; set; }

    private float DeviationMaxMin { get; set; }
    private float DeviationMaxMax { get; set; }

    private IEnumerable<float> SelectedAccuracyModifiers { get; set; } = new List<float>();

    private TarkovData.TarkovItem.WeaponCombination? SelectedCombination { get; set; }

    private void OnCombinationSelected(TarkovData.TarkovItem.WeaponCombination combination)
    {
        SelectedCombination = combination;
        StateHasChanged(); // Trigger a UI update
    }
    private string ExportedCombinationText = ""; // A property to hold the exported combination text

    private void ExportCombination(TarkovData.TarkovItem.WeaponCombination combination)
    {
        var exportData = new List<string>();

        // Add stack line item with Ergo, Recoil, and Total Combos
        exportData.Add("Stack Line item");
        exportData.Add($"Ergo: {combination.Ergonomics}");
        exportData.Add($"H - V recoil: {combination.RecoilHorizontal} - {combination.RecoilVertical}");
        exportData.Add($"Total Combos: {combination.TotalCombinations}");
        exportData.Add("-----");

        // Get all possible attachment combinations from the AttachmentSets
        int comboIndex = 1;
        foreach (var attachmentSet in combination.AttachmentSets)
        {
            exportData.Add($"Combo {comboIndex++}");

            // Add base gun stats to the export
            exportData.Add($"Base Gun: {SelectedWeapon?.name} | BASE ERGO: {SelectedWeapon?.ergonomics} | Base Recoil H V: {SelectedWeapon?.recoilHorizontal} / {SelectedWeapon?.recoilVertical} | Weight: {SelectedWeapon?.weight} | AVG24PRICE: {SelectedWeapon?.avg24hPrice} | LOW24PRICE: {SelectedWeapon?.low24hPrice}");
            exportData.Add(""); // Empty line for spacing

            // Add attachment details from the current attachment set
            var attachmentLines = attachmentSet.Split('|').Select(a => a.Trim()).ToList();
            foreach (var attachmentLine in attachmentLines)
            {
                exportData.Add($"{attachmentLine}");
            }

            exportData.Add(""); // Empty line for spacing

            // Add the total for this combination
            exportData.Add($"Totals: ERGO: {combination.Ergonomics} | RECOIL: {combination.RecoilHorizontal} - {combination.RecoilVertical} | WEIGHT: {combination.Weight} | AVG24PRICE: {combination.Avg24hPrice} | LOW24PRICE: {combination.Low24hPrice}");
            exportData.Add("-----");
        }

        // Use JSInterop to export to a file
        var exportContent = string.Join("\n", exportData);
        ExportToFile(exportContent, "weapon_combinations.txt");
    }
    private void OutputCombination(TarkovData.TarkovItem.WeaponCombination combination)
    {
        var sb = new StringBuilder();

        // Output base weapon and key details
        sb.AppendLine("Combo:");
        sb.AppendLine($"Ergo: {combination.Ergonomics}");
        sb.AppendLine($"Recoil (H - V): {combination.RecoilHorizontal} - {combination.RecoilVertical}");
        sb.AppendLine($"Total Weight: {combination.Weight}");
        sb.AppendLine($"Velocity: {combination.Velocity}");
        sb.AppendLine($"Accuracy Modifier: {combination.AccuracyModifier}");
        sb.AppendLine($"Avg 24h Price: {combination.Avg24hPrice}");
        sb.AppendLine($"Low 24h Price: {combination.Low24hPrice}");

        // Output all slot attachments
        foreach (var slot in combination.SlotGroups)
        {
            sb.AppendLine($"Slot: {slot.Key}");
            foreach (var item in slot.Value)
            {
                sb.AppendLine($"\tAttachment: {item.name} | ERGO: {item.ergonomicsModifier} | RECOIL: {item.recoilModifier} | WEIGHT: {item.weight}");
            }
        }

        sb.AppendLine("-----");

        // Append output to the property for UI
        ExportedCombinationText += sb.ToString();

        // Notify the UI to update
        StateHasChanged();
    }

    // Method to generate all possible attachment combinations
    private List<List<TarkovData.TarkovItem>> GenerateAttachmentCombinations(Dictionary<string, List<TarkovData.TarkovItem>> slotGroups)
    {
        var combinations = new List<List<TarkovData.TarkovItem>>();

        // Handle combination generation via cartesian product across all slots
        var attachmentGroups = slotGroups.Select(group => group.Value).ToList(); // Each group's attachments
        GenerateCombinationsRecursive(attachmentGroups, 0, new List<TarkovData.TarkovItem>(), combinations);

        return combinations;
    }

    // Recursive method to generate combinations
    private void GenerateCombinationsRecursive(List<List<TarkovData.TarkovItem>> attachmentGroups, int index, List<TarkovData.TarkovItem> currentCombination, List<List<TarkovData.TarkovItem>> result)
    {
        if (index == attachmentGroups.Count)
        {
            // Base case: We've reached the end of all attachment groups
            result.Add(new List<TarkovData.TarkovItem>(currentCombination));
            return;
        }

        // Iterate through the current attachment group and recurse
        foreach (var attachment in attachmentGroups[index])
        {
            currentCombination.Add(attachment);
            GenerateCombinationsRecursive(attachmentGroups, index + 1, currentCombination, result);
            currentCombination.RemoveAt(currentCombination.Count - 1); // Backtrack
        }
    }

    private void ExportToFile(string content, string fileName)
    {
        // Use JSInterop to trigger the file download in the browser
        JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, "text/plain", content);
    }

    // This method calculates the total number of combinations for the selected weapon.
    private int GetTotalCombinations(TarkovData.TarkovItem selectedWeapon)
    {
        return TarkovData.TarkovItem.GenerateUniqueCombinations(selectedWeapon).Count;
    }
    private bool isDrawerOpen = false;

    private void ToggleDrawer()
    {
        isDrawerOpen = !isDrawerOpen;
    }

    private void HandleCombinationSelection(TarkovData.TarkovItem.WeaponCombination combination)
    {
        SelectedCombination = combination;
        isDrawerOpen = true; // Open the drawer
        StateHasChanged(); // Trigger a UI update
    }

    private void SetMinMaxSliders()
    {
        if (SelectedWeapon != null)
        {
            VerticalRecoilMin = SelectedWeapon.recoilVertical / 2;
            VerticalRecoilMax = SelectedWeapon.recoilVertical * 2;

            ErgonomicsMin = SelectedWeapon.ergonomics / 2;
            ErgonomicsMax = SelectedWeapon.ergonomics * 2;

            VelocityMin = SelectedWeapon.velocity / 2;
            VelocityMax = SelectedWeapon.velocity * 2;

            BasePriceMax = SelectedWeapon.basePrice * 2;

            WeightMin = SelectedWeapon.weight / 2;
            WeightMax = SelectedWeapon.weight * 2;

            FireRateMin = SelectedWeapon.fireRate / 2;
            FireRateMax = SelectedWeapon.fireRate * 2;

            CenterOfImpactMin = SelectedWeapon.centerOfImpact / 2;
            CenterOfImpactMax = SelectedWeapon.centerOfImpact * 2;

            DeviationCurveMin = SelectedWeapon.deviationCurve / 2;
            DeviationCurveMax = SelectedWeapon.deviationCurve * 2;

            DeviationMaxMin = SelectedWeapon.deviationMax / 2;
            DeviationMaxMax = SelectedWeapon.deviationMax * 2;
        }
    }

    private List<List<string>> GeneratedCombinations { get; set; } = new();

    private void GenerateWeaponCombinations(TarkovItem selectedWeapon)
    {
        if (selectedWeapon == null) return;

        GeneratedCombinations.Clear();

        if (TarkovItem.DataTableSlots.TryGetValue(selectedWeapon.id, out var weaponSlots))
        {
            foreach (var slot in weaponSlots.Values)
            {
                if (slot.required)
                {
                    GeneratedCombinations.Add(slot.allowedIDs);
                }
            }
        }

        StateHasChanged(); // Update UI
    }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    async Task<GridData<TarkovData.TarkovItem.WeaponCombination>> LoadServerData(GridState<TarkovData.TarkovItem.WeaponCombination> state)
    {
        if (SelectedWeapon == null)
        {
            return new GridData<TarkovData.TarkovItem.WeaponCombination>
                {
                    Items = new List<TarkovData.TarkovItem.WeaponCombination>(),
                    TotalItems = 0
                };
        }

        var totalCombinations = TarkovData.TarkovItem.GenerateUniqueCombinations(SelectedWeapon);

        // Apply filters from the DataGrid
        IEnumerable<TarkovData.TarkovItem.WeaponCombination> filteredCombinations = totalCombinations;

        foreach (var filter in state.FilterDefinitions)
        {
            if (filter.Title == "Recoil Vertical" && filter.Value is double recoilVerticalDouble)
            {
                // Handle the operator from the filter (e.g., ">", "<", ">=", "<=", "=", "!=")
                switch (filter.Operator)
                {
                    case ">":
                        filteredCombinations = filteredCombinations.Where(x => x.RecoilVertical > (float)recoilVerticalDouble);
                        break;
                    case "<":
                        filteredCombinations = filteredCombinations.Where(x => x.RecoilVertical < (float)recoilVerticalDouble);
                        break;
                    case ">=":
                        filteredCombinations = filteredCombinations.Where(x => x.RecoilVertical >= (float)recoilVerticalDouble);
                        break;
                    case "<=":
                        filteredCombinations = filteredCombinations.Where(x => x.RecoilVertical <= (float)recoilVerticalDouble);
                        break;
                    case "=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.RecoilVertical - (float)recoilVerticalDouble) < 0.0001); // Tolerance for floating-point comparison
                        break;
                    case "!=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.RecoilVertical - (float)recoilVerticalDouble) >= 0.0001); // Tolerance for floating-point comparison
                        break;
                    default:
                        Console.WriteLine($"Unsupported operator: {filter.Operator}");
                        break;
                }
            }
            else if (filter.Title == nameof(TarkovData.TarkovItem.WeaponCombination.Ergonomics) && filter.Value is double ergonomicsDouble)
            {
                switch (filter.Operator)
                {
                    case ">":
                        filteredCombinations = filteredCombinations.Where(x => x.Ergonomics > (float)ergonomicsDouble);
                        break;
                    case "<":
                        filteredCombinations = filteredCombinations.Where(x => x.Ergonomics < (float)ergonomicsDouble);
                        break;
                    case ">=":
                        filteredCombinations = filteredCombinations.Where(x => x.Ergonomics >= (float)ergonomicsDouble);
                        break;
                    case "<=":
                        filteredCombinations = filteredCombinations.Where(x => x.Ergonomics <= (float)ergonomicsDouble);
                        break;
                    case "=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.Ergonomics - (float)ergonomicsDouble) < 0.0001);
                        break;
                    case "!=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.Ergonomics - (float)ergonomicsDouble) >= 0.0001);
                        break;
                    default:
                        Console.WriteLine($"Unsupported operator: {filter.Operator}");
                        break;
                }
            }
            else if (filter.Title == nameof(TarkovData.TarkovItem.WeaponCombination.Velocity) && filter.Value is double velocityDouble)
            {
                switch (filter.Operator)
                {
                    case ">":
                        filteredCombinations = filteredCombinations.Where(x => x.Velocity > (float)velocityDouble);
                        break;
                    case "<":
                        filteredCombinations = filteredCombinations.Where(x => x.Velocity < (float)velocityDouble);
                        break;
                    case ">=":
                        filteredCombinations = filteredCombinations.Where(x => x.Velocity >= (float)velocityDouble);
                        break;
                    case "<=":
                        filteredCombinations = filteredCombinations.Where(x => x.Velocity <= (float)velocityDouble);
                        break;
                    case "=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.Velocity - (float)velocityDouble) < 0.0001);
                        break;
                    case "!=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.Velocity - (float)velocityDouble) >= 0.0001);
                        break;
                    default:
                        Console.WriteLine($"Unsupported operator: {filter.Operator}");
                        break;
                }
            }
            else if (filter.Title == nameof(TarkovData.TarkovItem.WeaponCombination.AccuracyModifier) && filter.Value is double accuracyModifierDouble)
            {
                // Handle the operator from the filter (e.g., ">", "<", ">=", "<=", "=", "!=")
                switch (filter.Operator)
                {
                    case ">":
                        filteredCombinations = filteredCombinations.Where(x => x.AccuracyModifier > (float)accuracyModifierDouble);
                        break;
                    case "<":
                        filteredCombinations = filteredCombinations.Where(x => x.AccuracyModifier < (float)accuracyModifierDouble);
                        break;
                    case ">=":
                        filteredCombinations = filteredCombinations.Where(x => x.AccuracyModifier >= (float)accuracyModifierDouble);
                        break;
                    case "<=":
                        filteredCombinations = filteredCombinations.Where(x => x.AccuracyModifier <= (float)accuracyModifierDouble);
                        break;
                    case "=":
                        // Use a small tolerance to account for floating-point precision differences
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.AccuracyModifier - (float)accuracyModifierDouble) < 0.0001);
                        break;
                    case "!=":
                        // Use a small tolerance for inequality checks
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.AccuracyModifier - (float)accuracyModifierDouble) >= 0.0001);
                        break;
                    default:
                        // Handle unexpected operators, logging for debugging purposes
                        Console.WriteLine($"Unsupported operator: {filter.Operator}");
                        break;
                }
            }
            else if (filter.Title == nameof(TarkovData.TarkovItem.WeaponCombination.Weight) && filter.Value is double weightDouble)
            {
                // Handle the operator from the filter (e.g., ">", "<", ">=", "<=", "=", "!=")
                switch (filter.Operator)
                {
                    case ">":
                        filteredCombinations = filteredCombinations.Where(x => x.Weight > (float)weightDouble);
                        break;
                    case "<":
                        filteredCombinations = filteredCombinations.Where(x => x.Weight < (float)weightDouble);
                        break;
                    case ">=":
                        filteredCombinations = filteredCombinations.Where(x => x.Weight >= (float)weightDouble);
                        break;
                    case "<=":
                        filteredCombinations = filteredCombinations.Where(x => x.Weight <= (float)weightDouble);
                        break;
                    case "=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.Weight - (float)weightDouble) < 0.0001); // Tolerance for floating-point comparison
                        break;
                    case "!=":
                        filteredCombinations = filteredCombinations.Where(x => Math.Abs(x.Weight - (float)weightDouble) >= 0.0001); // Tolerance for floating-point comparison
                        break;
                    default:
                        Console.WriteLine($"Unsupported operator: {filter.Operator}");
                        break;
                }
            }
            else if (filter.Title == "Base Price" && filter.Value is double basePriceDouble)
            {
                // Handle the operator from the filter (e.g., ">", "<", ">=", "<=", "=", "!=")
                switch (filter.Operator)
                {
                    case ">":
                        filteredCombinations = filteredCombinations.Where(x => x.BasePrice > (int)basePriceDouble);
                        break;
                    case "<":
                        filteredCombinations = filteredCombinations.Where(x => x.BasePrice < (int)basePriceDouble);
                        break;
                    case ">=":
                        filteredCombinations = filteredCombinations.Where(x => x.BasePrice >= (int)basePriceDouble);
                        break;
                    case "<=":
                        filteredCombinations = filteredCombinations.Where(x => x.BasePrice <= (int)basePriceDouble);
                        break;
                    case "=":
                        filteredCombinations = filteredCombinations.Where(x => x.BasePrice == (int)basePriceDouble);
                        break;
                    case "!=":
                        filteredCombinations = filteredCombinations.Where(x => x.BasePrice != (int)basePriceDouble);
                        break;
                    default:
                        // If no known operator, log or handle the default case
                        Console.WriteLine($"Unsupported operator: {filter.Operator}");
                        break;
                }
            }
            // Add additional filtering logic for other properties as needed
        }

        // Apply sorting
        IOrderedEnumerable<TarkovData.TarkovItem.WeaponCombination> sortedCombinations = filteredCombinations.OrderBy(x => 0); // Default ordering
        foreach (var sortDefinition in state.SortDefinitions)
        {
            if (sortDefinition.SortBy == nameof(TarkovData.TarkovItem.WeaponCombination.RecoilVertical))
            {
                sortedCombinations = !sortDefinition.Descending
                    ? sortedCombinations.ThenBy(x => x.RecoilVertical)
                    : sortedCombinations.ThenByDescending(x => x.RecoilVertical);
            }
            else if (sortDefinition.SortBy == nameof(TarkovData.TarkovItem.WeaponCombination.Ergonomics))
            {
                sortedCombinations = !sortDefinition.Descending
                    ? sortedCombinations.ThenBy(x => x.Ergonomics)
                    : sortedCombinations.ThenByDescending(x => x.Ergonomics);
            }
            else if (sortDefinition.SortBy == nameof(TarkovData.TarkovItem.WeaponCombination.Velocity))
            {
                sortedCombinations = !sortDefinition.Descending
                    ? sortedCombinations.ThenBy(x => x.Velocity)
                    : sortedCombinations.ThenByDescending(x => x.Velocity);
            }
            else if (sortDefinition.SortBy == nameof(TarkovData.TarkovItem.WeaponCombination.AccuracyModifier))
            {
                sortedCombinations = !sortDefinition.Descending
                    ? sortedCombinations.ThenBy(x => x.AccuracyModifier)
                    : sortedCombinations.ThenByDescending(x => x.AccuracyModifier);
            }
            else if (sortDefinition.SortBy == nameof(TarkovData.TarkovItem.WeaponCombination.Weight))
            {
                sortedCombinations = !sortDefinition.Descending
                    ? sortedCombinations.ThenBy(x => x.Weight)
                    : sortedCombinations.ThenByDescending(x => x.Weight);
            }
            else if (sortDefinition.SortBy == nameof(TarkovData.TarkovItem.WeaponCombination.BasePrice))
            {
                sortedCombinations = !sortDefinition.Descending
                    ? sortedCombinations.ThenBy(x => x.BasePrice)
                    : sortedCombinations.ThenByDescending(x => x.BasePrice);
            }
            // Add additional sorting logic for other properties as needed
        }

        // Pagination logic
        var currentPage = state.Page;
        var paginatedCombinations = sortedCombinations.Skip(currentPage * state.PageSize).Take(state.PageSize).ToList();

        return new GridData<TarkovData.TarkovItem.WeaponCombination>
            {
                Items = paginatedCombinations,
                TotalItems = filteredCombinations.Count()
            };
    }

    protected override async Task OnInitializedAsync()
    {
        string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "TarkovData.json");

        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();
            Calibers = TarkovData.TarkovItem.GetDistinctCalibers();

            var jsonData = JsonSerializer.Serialize(TarkovData.TarkovItem.DataTable.Values);
            await File.WriteAllTextAsync(filePath, jsonData);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    private IEnumerable<TarkovData.TarkovItem> FilteredWeaponNames =>
    TarkovData.TarkovItem.DataTable.Values
    .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase) &&
    (!SelectedCategories.Any() || SelectedCategories.Contains(item.categoryName)) &&
    (!SelectedCalibers.Any() || SelectedCalibers.Contains(item.caliber)));

    private void OnSelectedCategoryChanged()
    {
        SelectedWeapons.Clear(); // Clear selected weapons to refresh the list
        StateHasChanged(); // Ensure the state is updated
        Console.WriteLine($"SelectedCategories changed to: {string.Join(", ", SelectedCategories)}");
    }

    private async Task OnSelectedWeightChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weightSelect");
        if (selectedValues.Any())
        {
            SelectedWeights = selectedValues.Select(float.Parse);
        }
        Console.WriteLine($"SelectedWeights changed to: {string.Join(", ", SelectedWeights)}");
    }

    private void CalculateStatRanges()
    {
        if (SelectedWeapon == null) return;

        // Generate combinations for the selected weapon
        var combinations = TarkovData.TarkovItem.GenerateUniqueCombinations(SelectedWeapon);

        if (!combinations.Any()) return;

        // Initialize min and max values based on the first combination
        var firstCombination = combinations.First();

        VerticalRecoilMin = VerticalRecoilMax = firstCombination.RecoilVertical;
        ErgonomicsMin = ErgonomicsMax = firstCombination.Ergonomics;
        VelocityMin = VelocityMax = firstCombination.Velocity;
        BasePriceMin = BasePriceMax = firstCombination.BasePrice;
        AccuracyModifierMin = AccuracyModifierMax = firstCombination.AccuracyModifier;
        WeightMin = WeightMax = firstCombination.Weight;

        // Debug: Log the initial values
        Console.WriteLine($"Initial Base Price: {BasePriceMin}");

        // Iterate over combinations to find min and max for each stat
        foreach (var combination in combinations)
        {
            VerticalRecoilMin = Math.Min(VerticalRecoilMin, combination.RecoilVertical);
            VerticalRecoilMax = Math.Max(VerticalRecoilMax, combination.RecoilVertical);

            ErgonomicsMin = Math.Min(ErgonomicsMin, combination.Ergonomics);
            ErgonomicsMax = Math.Max(ErgonomicsMax, combination.Ergonomics);

            VelocityMin = Math.Min(VelocityMin, combination.Velocity);
            VelocityMax = Math.Max(VelocityMax, combination.Velocity);

            BasePriceMin = Math.Min(BasePriceMin, combination.BasePrice);
            BasePriceMax = Math.Max(BasePriceMax, combination.BasePrice);

            AccuracyModifierMin = Math.Min(AccuracyModifierMin, combination.AccuracyModifier);
            AccuracyModifierMax = Math.Max(AccuracyModifierMax, combination.AccuracyModifier);

            WeightMin = Math.Min(WeightMin, combination.Weight);
            WeightMax = Math.Max(WeightMax, combination.Weight);
        }

    }


    private void UpdateAvailableSlots(TarkovData.TarkovItem selectedWeapon)
    {
        AvailableSlots.Clear();

        if (selectedWeapon != null && TarkovData.TarkovItem.DataTableSlots.TryGetValue(selectedWeapon.id, out var weaponSlots))
        {
            foreach (var slot in weaponSlots.Values)
            {
                foreach (var allowedId in slot.allowedIDs)
                {
                    var allowedItem = TarkovData.TarkovItem.DataTable.GetValueOrDefault(allowedId);
                    if (allowedItem != null)
                    {
                        AvailableSlots.Add(new DisplaySlot
                            {
                                ItemId = slot.itemId,
                                SlotId = slot.slotId,
                                SlotName = slot.name,
                                AllowedItemId = allowedItem.id,
                                AllowedItemName = allowedItem.name
                            });
                    }
                }
            }
        }
    }

    private async Task OnSelectedErgonomicsChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "ergonomicsSelect");
        if (selectedValues.Any())
        {
            SelectedErgonomics = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedErgonomics changed to: {SelectedErgonomics}");
    }

    private void OnWeaponSelected(TarkovItem weapon)
    {
        SelectedWeapon = weapon;
        GenerateWeaponCombinations(SelectedWeapon);
        CalculateStatRanges(); // Calculate ranges after generating combinations
    }

    private void OnWeaponRowClicked(TarkovData.TarkovItem weapon)
    {
        if (SelectedWeapons.Contains(weapon.name))
        {
            SelectedWeapons.Remove(weapon.name);
        }
        else
        {
            SelectedWeapons.Add(weapon.name);
        }

        SelectedWeapon = SelectedWeapons.Any()
            ? TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.Last())
            : null;
        OnWeaponSelected(SelectedWeapon);
        UpdateAvailableSlots(SelectedWeapon);
        StateHasChanged();
    }

    private IEnumerable<TarkovData.TarkovItem.WeaponCombination> ApplyFilters(
    IEnumerable<TarkovData.TarkovItem.WeaponCombination> combinations,
    Dictionary<string, Func<TarkovData.TarkovItem.WeaponCombination, bool>> filterDefinitions)
    {
        foreach (var filter in filterDefinitions)
        {
            combinations = combinations.Where(filter.Value);
        }
        return combinations;
    }

    private async Task OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapons = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weaponSelect");
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        Console.WriteLine($"SelectedWeapons changed to: {string.Join(", ", SelectedWeapons)}");
    }

    private async Task OnSelectedCaliberChanged()
    {
        Console.WriteLine($"SelectedCalibers changed to: {string.Join(", ", SelectedCalibers)}");

        StateHasChanged();
    }

    private async Task OnSelectedRecoilVerticalChanged()
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "recoilVerticalSelect");
        SelectedVerticalRecoils = selectedValues.Select(float.Parse);
        Console.WriteLine($"SelectedRecoilVerticals changed to: {string.Join(", ", SelectedVerticalRecoils)}");
    }

    private async Task OnSelectedVelocityChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "velocitySelect");
        if (selectedValues.Any())
        {
            SelectedVelocity = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedVelocity changed to: {SelectedVelocity}");
    }

    private async Task OnSelectedBasePriceChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "basePriceSelect");
        if (selectedValues.Any())
        {
            SelectedBasePrice = int.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedBasePrice changed to: {SelectedBasePrice}");
    }

    private async Task OnSelectedAccuracyModifierChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "accuracyModifierSelect");
        if (selectedValues.Any())
        {
            SelectedAccuracyModifiers = selectedValues.Select(float.Parse);
        }
        Console.WriteLine($"SelectedAccuracyModifiers changed to: {string.Join(", ", SelectedAccuracyModifiers)}");
    }

    [JSInvokable]
    public void UpdateSelectedWeapons(List<string> selectedWeapons)
    {
        SelectedWeapons = selectedWeapons;
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        StateHasChanged();
    }

    public class DisplaySlot
    {
        public string ItemId { get; set; }
        public string SlotId { get; set; }
        public string SlotName { get; set; }
        public string AllowedItemId { get; set; }
        public string AllowedItemName { get; set; }
    }
}
