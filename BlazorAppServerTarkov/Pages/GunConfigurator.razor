@page "/gun-configurator"
@using Microsoft.JSInterop
@using TarkovDataOrganizer

<script>
    function getSelectedValues(selectId) {
        var select = document.getElementById(selectId);
        var selectedValues = [];
        for (var i = 0; i < select.options.length; i++) {
            if (select.options[i].selected) {
                selectedValues.push(select.options[i].value);
            }
        }
        return selectedValues;
    }
</script>

<style>

    .weapon-image-container {
        display: flex;
        flex-direction: column;
        height: 100px;
        overflow-y: scroll;
    }

    .weapon-image {
        width: 50px;
        height: 50px;
        margin: 5px;
    }
</style>


<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Category</th>
                <th>Weapon</th>
                <th>Image</th>
                <th>Caliber</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <select id="categorySelect" multiple @onchange="OnSelectedCategoryChanged">
                        @foreach (var category in Categories)
                        {
                            <option value="@category" selected="@SelectedCategories.Contains(category)">@category</option>
                        }
                    </select>
                </td>
                <td>
                    <select id="weaponSelect" multiple @onchange="OnSelectedWeaponChanged">
                        @foreach (var weapon in FilteredWeaponNames)
                        {
                            <option value="@weapon.name" selected="@SelectedWeapons.Contains(weapon.name)">@weapon.name</option>
                        }
                    </select>
                </td>
                <td>
                    <div class="weapon-image-container">
                        @foreach (var weapon in FilteredWeaponNames)
                        {
                            <img src="@weapon.gridImageLink" alt="@weapon.name" class="weapon-image" />
                        }
                    </div>
                </td>
                <td>
                    <select id="caliberSelect" multiple @onchange="OnSelectedCaliberChanged">
                        @foreach (var caliber in Calibers)
                        {
                            <option value="@caliber" selected="@SelectedCalibers.Contains(caliber)">@caliber</option>
                        }
                    </select>
                </td>
            </tr>
        </tbody>
    </table>

    @if (!string.IsNullOrEmpty(SelectedWeapon))
    {
        var selectedWeaponData = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapon);
        if (selectedWeaponData != null)
        {
            <div id="weaponDisplay">
                <h3>@selectedWeaponData.name</h3>
                <img id="weaponImage" src="@selectedWeaponData.defaultPresetBaseImageLink" alt="Selected Weapon Image" />
            </div>
        }
    }
}

@code {
    private List<string> Calibers = new List<string>();
    public List<string> SelectedWeapons { get; set; } = new List<string>();
    public List<string> SelectedCategories { get; set; } = new List<string>();
    public List<string> SelectedCalibers { get; set; } = new List<string>();
    public string? SelectedWeapon { get; set; }
    public List<string> Categories { get; set; } = new();

    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();
            Calibers = TarkovData.TarkovItem.GetDistinctCalibers();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private IEnumerable<TarkovData.TarkovItem> FilteredWeaponNames =>
        !SelectedCategories.Any()
            ? TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase))
            : TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase) &&
                               SelectedCategories.Contains(item.categoryName));

    private async Task OnSelectedCategoryChanged(ChangeEventArgs e)
    {
        SelectedCategories = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "categorySelect");
        SelectedWeapons.Clear(); // Clear selected weapons to refresh the list
        StateHasChanged(); // Ensure the state is updated
        Console.WriteLine($"SelectedCategories changed to: {string.Join(", ", SelectedCategories)}");
    }

    private async Task OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapons = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weaponSelect");
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = SelectedWeapons.First();
        }
        Console.WriteLine($"SelectedWeapons changed to: {string.Join(", ", SelectedWeapons)}");
    }

    private async Task OnSelectedCaliberChanged(ChangeEventArgs e)
    {
        SelectedCalibers = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "caliberSelect");
        Console.WriteLine($"SelectedCalibers changed to: {string.Join(", ", SelectedCalibers)}");
    }
}
