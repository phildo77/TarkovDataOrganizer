@page "/gun-configurator"
@using Microsoft.JSInterop
@using MudExtensions
@using TarkovDataOrganizer
@using static TarkovDataOrganizer.TarkovData

<script>
    function getSelectedValues(selectId) {
        var select = document.getElementById(selectId);
        if (select) {
            var selectedValues = [];
            for (var i = 0; i < select.options.length; i++) {
                if (select.options[i].selected) {
                    selectedValues.push(select.options[i].value);
                }
            }
            return selectedValues;
        } else {
            console.error(`Element with id ${selectId} not found.`);
            return [];
        }
    }

    function toggleSelection(rowId) {
        var row = document.getElementById(rowId);
        row.classList.toggle('selected');

        var selectedValues = [];
        var selectedRows = document.querySelectorAll('.weapon-row.selected');
        selectedRows.forEach(row => {
            selectedValues.push(row.getAttribute('data-value'));
        });

        DotNet.invokeMethodAsync('YourAssemblyName', 'UpdateSelectedWeapons', selectedValues);
    }
</script>

<style>

    .weapon-default-image {
        width: 100%; /* Ensure it takes up the full width of the container */
        height: auto; /* Maintain the aspect ratio */
        max-width: 200px; /* Adjust as needed to fit within your layout */
        display: block; /* Ensure the image is treated as a block element */
        margin: 0 auto; /* Center the image if needed */
    }


    .weapon-image-container {
        display: flex;
        flex-direction: column;
        height: 100px;
        overflow-y: scroll;
    }

    .weapon-image {
        width: 50px;
        height: 50px;
        margin: 5px;
    }

    .weapon-table {
        width: 100%;
    }

    .weapon-table-td {
        height: 79px;
        display: flex;
        overflow-y: scroll;
    }

    .weapon-row {
        cursor: pointer;
    }

        .weapon-row.selected {
            background-color: #d3d3d3; /* Highlight selected row */
        }

    .scrollable-container {
        max-height: 150px; /* Adjust the height as needed */
        overflow-y: auto;
        border: 1px solid #ccc; /* Optional: Adds a border around the container */
        padding: 8px; /* Optional: Adds padding inside the container */
        margin-bottom: 16px; /* Optional: Adds space between containers */
    }

        .scrollable-container ul {
            list-style-type: none; /* Removes bullet points from the list */
            padding: 0; /* Removes default padding */
            margin: 0; /* Removes default margin */
        }

        .scrollable-container li {
            margin: 4px 0; /* Optional: Adds space between list items */
        }
</style>

<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{


    <MudDrawer Open="@isDrawerOpen" Anchor="Anchor.End" Variant="DrawerVariant.Mini">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Selected Weapon Combination</MudText>
    </MudDrawerHeader>
        <div id="comboDisplay-@SelectedWeapon?.name" style="border: 1px solid #ccc; padding: 8px; width: 300px;">
            @if (SelectedCombination != null)
            {
                <h3>@SelectedWeapon?.name</h3>
                <img id="weaponImage-@SelectedWeapon?.name" src="@SelectedWeapon?.defaultPresetBaseImageLink" alt="Selected Weapon Image" style="width: 100%; height: auto;" />
                <p>Recoil Vertical: @SelectedCombination.RecoilVertical</p>
                <p>Ergonomics: @SelectedCombination.Ergonomics</p>
                <p>Velocity: @SelectedCombination.Velocity</p>
                <p>Base Price: @SelectedCombination.BasePrice</p>
                <p>Accuracy Modifier: @SelectedCombination.AccuracyModifier</p>
                <p>Weight: @SelectedCombination.Weight</p>

                @foreach (var slotGroup in SelectedCombination.SlotGroups)
                {
                    <div style="margin-bottom: 20px;">
                        <div style="display: flex; align-items: center;">
                            <strong>@slotGroup.Key:</strong>
                        </div>
                        <div style="margin-left: 10px;">
                            @if (slotGroup.Value.Any())
                            {
                                @foreach (var attachment in slotGroup.Value)
                                {
                                    <div style="display: flex; align-items: center; margin-top: 10px;">
                                        <img src="@attachment.gridImageLink" alt="@attachment.name" style="width: 50px; height: 50px; margin-right: 10px;" />
                                        <span>@attachment.name</span>
                                        <span style="margin-left: 10px;">
                                            Recoil Mod: @attachment.recoilModifier,
                                            Ergo Mod: @attachment.ergonomicsModifier,
                                            Velocity: @attachment.velocity,
                                            Weight: @attachment.weight
                                        </span>
                                    </div>
                                }
                            }
                            else
                            {
                                <div style="display: flex; align-items: center; margin-top: 10px;">
                                    <span style="color: gray;">(Empty Slot)</span>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </MudDrawer>



    <div style="display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: auto auto; gap: 16px; padding: 16px;">
        <!-- First Pane -->
        <div>
            <table>
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Weapon</th>
                        <th>Caliber</th>
                        <th>Attachments</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <MudSelect T="string" Label="Select Categories" Variant="Variant.Filled" @bind-Value="SelectedCategory" @bind-SelectedValues="SelectedCategories" MultiSelection="true" OnClose="OnSelectedCategoryChanged">
                                @foreach (var category in Categories)
                                {
                                    <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        <td class="weapon-table-td">
                            <table class="weapon-table">
                                @foreach (var weapon in FilteredWeaponNames)
                                {
                                    <tr id="weapon-@weapon.shortName" class="weapon-row" data-value="@weapon.name" @onclick="() => OnWeaponRowClicked(weapon)">
                                        <td>
                                            <img src="@weapon.defaultPresetGridImageLink" alt="@weapon.shortName" class="weapon-image" />
                                            @weapon.shortName
                                        </td>
                                    </tr>
                                }
                            </table>
                        </td>
                        <td>
                            <MudSelect T="string"
                                       Label="Select Caliber"
                                       Variant="Variant.Filled"
                                       @bind-SelectedValues="SelectedCalibers"
                                       MultiSelection="true"
                                       OnClose="OnSelectedCaliberChanged">
                                @foreach (var caliber in Calibers)
                                {
                                    <MudSelectItem T="string" Value="@caliber">@caliber</MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        @if (SelectedWeapon != null)
                        {
                            <td>
                                <MudSelect T="string" @bind-Value="SelectedAttachment" Variant="Variant.Filled" InputId="attachmentSelect">
                                    @foreach (var slot in AvailableSlots)
                                    {
                                        <MudSelectItem Value="@slot.AllowedItemId">@slot.SlotName: @slot.AllowedItemName</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Second Pane -->
        <div>
            <table>
                <thead>
                    <tr>
                        @if (SelectedWeapon != null)
                        {
                            <th>Recoil Vertical</th>
                            <th>Ergonomics</th>
                            <th>Velocity</th>
                            <th>Base Price</th>
                            <th>Accuracy Modifier</th>
                            <th>Weight</th>
                            <th>Fire Rate</th>
                            <th>Center of Impact</th>
                            <th>Deviation Curve</th>
                            <th>Deviation Max</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        @if (SelectedWeapon != null)
                        {
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedVerticalRecoil"
                                           Min="@VerticalRecoilMin"
                                           Max="@VerticalRecoilMax"
                                           Step="1"
                                           Variant="Variant.Filled" />
                                <p>Recoil Vertical: @SelectedVerticalRecoil</p>
                                <small>
                                    Range:
                                    <input type="number" @bind="VerticalRecoilMin" style="width: 50px;" /> -
                                    <input type="number" @bind="VerticalRecoilMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedErgonomics"
                                           Min="@ErgonomicsMin"
                                           Max="@ErgonomicsMax"
                                           Step="1"
                                           Variant="Variant.Filled" />
                                <p>Ergonomics: @SelectedErgonomics</p>
                                <small>
                                    Range:
                                    <input type="number" @bind="ErgonomicsMin" style="width: 50px;" /> -
                                    <input type="number" @bind="ErgonomicsMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedVelocity"
                                           Min="@VelocityMin"
                                           Max="@VelocityMax"
                                           Step="10"
                                           Variant="Variant.Filled" />
                                <p>Velocity: @SelectedVelocity</p>
                                <small>
                                    Range:
                                    <input type="number" @bind="VelocityMin" style="width: 50px;" /> -
                                    <input type="number" @bind="VelocityMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="int"
                                           @bind-Value="SelectedBasePrice"
                                           Min="@BasePriceMin"
                                           Max="@BasePriceMax"
                                           Step="100"
                                           Variant="Variant.Filled"
                                           ValueLabelFormat="C2" />
                                <p>Base Price: @($"{SelectedBasePrice:C2}")</p>
                                <small>
                                    Range:
                                    <input type="number" @bind="BasePriceMin" style="width: 50px;" /> -
                                    <input type="number" @bind="BasePriceMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedAccuracyModifier"
                                           Min="@AccuracyModifierMin"
                                           Max="@AccuracyModifierMax"
                                           Step="0.01f"
                                           Variant="Variant.Filled" />
                                <p>Accuracy Modifier: @SelectedAccuracyModifier</p>
                                <small>
                                    Range:
                                    <input type="number" step="0.01" @bind="AccuracyModifierMin" style="width: 50px;" /> -
                                    <input type="number" step="0.01" @bind="AccuracyModifierMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedWeight"
                                           Min="@WeightMin"
                                           Max="@WeightMax"
                                           Step="0.1f"
                                           Variant="Variant.Filled" />
                                <p>Weight: @SelectedWeight</p>
                                <small>
                                    Range:
                                    <input type="number" step="0.1" @bind="WeightMin" style="width: 50px;" /> -
                                    <input type="number" step="0.1" @bind="WeightMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedFireRate"
                                           Min="@FireRateMin"
                                           Max="@FireRateMax"
                                           Step="1"
                                           Variant="Variant.Filled" />
                                <p>Fire Rate: @SelectedFireRate</p>
                                <small>
                                    Range:
                                    <input type="number" @bind="FireRateMin" style="width: 50px;" /> -
                                    <input type="number" @bind="FireRateMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedCenterOfImpact"
                                           Min="@CenterOfImpactMin"
                                           Max="@CenterOfImpactMax"
                                           Step="0.1f"
                                           Variant="Variant.Filled" />
                                <p>Center of Impact: @SelectedCenterOfImpact</p>
                                <small>
                                    Range:
                                    <input type="number" step="0.1" @bind="CenterOfImpactMin" style="width: 50px;" /> -
                                    <input type="number" step="0.1" @bind="CenterOfImpactMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedDeviationCurve"
                                           Min="@DeviationCurveMin"
                                           Max="@DeviationCurveMax"
                                           Step="0.1f"
                                           Variant="Variant.Filled" />
                                <p>Deviation Curve: @SelectedDeviationCurve</p>
                                <small>
                                    Range:
                                    <input type="number" step="0.1" @bind="DeviationCurveMin" style="width: 50px;" /> -
                                    <input type="number" step="0.1" @bind="DeviationCurveMax" style="width: 50px;" />
                                </small>
                            </td>
                            <td>
                                <MudSlider T="float"
                                           @bind-Value="SelectedDeviationMax"
                                           Min="@DeviationMaxMin"
                                           Max="@DeviationMaxMax"
                                           Step="0.1f"
                                           Variant="Variant.Filled" />
                                <p>Deviation Max: @SelectedDeviationMax</p>
                                <small>
                                    Range:
                                    <input type="number" step="0.1" @bind="DeviationMaxMin" style="width: 50px;" /> -
                                    <input type="number" step="0.1" @bind="DeviationMaxMax" style="width: 50px;" />
                                </small>
                            </td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>


@if (SelectedWeapon != null)
{
            // Total number of combinations
            var totalCombinations = TarkovData.TarkovItem.GenerateUniqueCombinations(SelectedWeapon);

            // Set the page size (number of items per page)
            int pageSize = 20;

            // Create a function to load data for the current page
            async Task<GridData<TarkovData.TarkovItem.WeaponCombination>> LoadServerData(GridState<TarkovData.TarkovItem.WeaponCombination> state)
            {
                // Calculate the current page
                var currentPage = state.Page;

                // Get the items for the current page
                var paginatedCombinations = totalCombinations.Skip(currentPage * pageSize).Take(pageSize).ToList();

                // Return the data to the grid
                return new GridData<TarkovData.TarkovItem.WeaponCombination>
                        {
                            Items = paginatedCombinations,
                            TotalItems = totalCombinations.Count
                        };
            }

            <MudDataGrid T="TarkovData.TarkovItem.WeaponCombination" ServerData="LoadServerData" RowsPerPage="pageSize" Dense="true" Hover="true" Bordered="true" Striped="true">
        <Columns>
            <PropertyColumn  Property="x => x.RecoilVertical" Title="Recoil Vertical" />
            <PropertyColumn  Property="x => x.Ergonomics" Title="Ergonomics" />
            <PropertyColumn  Property="x => x.Velocity" Title="Velocity" />
            <PropertyColumn  Property="x => x.AccuracyModifier" Title="Accuracy Modifier" />
            <PropertyColumn  Property="x => x.Weight" Title="Weight" />
            <PropertyColumn  Property="x => x.BasePrice" Title="Base Price" Format="C2" />

            <!-- Template for Weapon Image -->
            <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Weapon Image">
                <CellTemplate>
                    <img src="@SelectedWeapon.defaultPresetBaseImageLink" alt="@SelectedWeapon.name" class="weapon-default-image" />
                    <span>@SelectedWeapon.name</span>
                </CellTemplate>
            </TemplateColumn>

            <!-- Template for Attachments -->
            <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination" Title="Attachments">
                <CellTemplate>
                    @foreach (var slotGroup in context.Item.SlotGroups)
                    {
                        <div>
                            @if (slotGroup.Key != null)
                            {
                                <strong>@slotGroup.Key</strong> <!-- Display Slot Name -->
                                <div>
                                    @foreach (var attachment in slotGroup.Value)
                                    {
                                        <div>
                                            <img src="@attachment.gridImageLink" alt="@attachment.name" class="weapon-image" />
                                            <span>@attachment.name</span>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </CellTemplate>
            </TemplateColumn>

            <!-- Template for Selection Button -->
            <TemplateColumn T="TarkovData.TarkovItem.WeaponCombination">
                <CellTemplate>
                    <MudButton OnClick="() => HandleCombinationSelection(context.Item)">
                        Select This Combination
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
                <PagerContent>
                    <MudDataGridPager PageSizeOptions=@(new int[] {5, 10, 20}) />
                </PagerContent>
    </MudDataGrid>
}


        <!-- Third Pane -->
        <div style="grid-column: span 2; justify-self: end;">
            <div style="display: flex; flex-wrap: wrap; gap: 16px;">
                @if (SelectedCombination != null)
                {
                    <div id="comboDisplay-@SelectedWeapon.name" style="border: 1px solid #ccc; padding: 8px; width: 300px;">
                        <h3>@SelectedWeapon.name</h3>
                        <img id="weaponImage-@SelectedWeapon.name" src="@SelectedWeapon.defaultPresetBaseImageLink" alt="Selected Weapon Image" style="width: 100%; height: auto;" />
                        <p>Recoil Vertical: @SelectedCombination.RecoilVertical</p>
                        <p>Ergonomics: @SelectedCombination.Ergonomics</p>
                        <p>Velocity: @SelectedCombination.Velocity</p>
                        <p>Base Price: @SelectedCombination.BasePrice</p>
                        <p>Accuracy Modifier: @SelectedCombination.AccuracyModifier</p>
                        <p>Weight: @SelectedCombination.Weight</p>

                        <!-- Wrap each slot group in a container -->
                        @foreach (var slotGroup in SelectedCombination.SlotGroups)
                        {
                            <div style="margin-bottom: 20px;">
                                <div style="display: flex; align-items: center;">
                                    <strong>@slotGroup.Key:</strong>
                                </div>
                                <div style="margin-left: 10px;">
                                    @if (slotGroup.Value.Any())
                                    {
                                        @foreach (var attachment in slotGroup.Value)
                                        {
                                            <!-- Render TreeView for subslots if they exist -->
                                            @if (attachment.HasSubSlots())
                                            {
                                                <div style="margin-top: 10px;">
                                                    <MudTreeView T="string">
                                                        <div style="display: flex; align-items: center; margin-top: 10px;">
                                                            <img src="@attachment.gridImageLink" alt="@attachment.name" style="width: 50px; height: 50px; margin-right: 10px;" />
                                                            <span>@attachment.name</span>
                                                            <span style="margin-left: 10px;">
                                                                Recoil Mod: @attachment.recoilModifier,
                                                                Ergo Mod: @attachment.ergonomicsModifier,
                                                                Velocity: @attachment.velocity,
                                                                Weight: @attachment.weight
                                                            </span>
                                                        </div>
                                                        @foreach (var subslot in attachment.GetSubSlots())
                                                        {
                                                            var subslotItem = TarkovData.TarkovItem.DataTable.GetValueOrDefault(subslot.allowedIDs.FirstOrDefault());
                                                            if (subslotItem != null)
                                                            {
                                                                <MudTreeViewItem T="string" Text="@subslotItem.categoryName">
                                                                    <div style="display: flex; align-items: center;">
                                                                        <img src="@subslotItem.gridImageLink" alt="@subslotItem.name" style="width: 40px; height: 40px; margin-right: 10px;" />
                                                                        <span>@subslotItem.name</span>
                                                                        <span style="margin-left: 10px;">
                                                                            Recoil Mod: @subslotItem.recoilModifier,
                                                                            Ergo Mod: @subslotItem.ergonomicsModifier,
                                                                            Velocity: @subslotItem.velocity,
                                                                            Weight: @subslotItem.weight
                                                                        </span>
                                                                    </div>
                                                                </MudTreeViewItem>
                                                            }
                                                        }
                                                    </MudTreeView>
                                                </div>
                                            }
                                            else
                                            {
                                                <div style="display: flex; align-items: center; margin-top: 10px;">
                                                    <img src="@attachment.gridImageLink" alt="@attachment.name" style="width: 50px; height: 50px; margin-right: 10px;" />
                                                    <span>@attachment.name</span>
                                                    <span style="margin-left: 10px;">
                                                        Recoil Mod: @attachment.recoilModifier,
                                                        Ergo Mod: @attachment.ergonomicsModifier,
                                                        Velocity: @attachment.velocity,
                                                        Weight: @attachment.weight
                                                    </span>
                                                </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <!-- Display empty slot -->
                                        <div style="display: flex; align-items: center; margin-top: 10px;">
                                            <span style="color: gray;">(Empty Slot)</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<string> Calibers = new List<string>();
    private List<float> RecoilVerticals = new List<float>();
    public List<string> SelectedWeapons { get; set; } = new List<string>();
    public string? SelectedCategory { get; set; }
    public string? SelectedAttachment { get; set; }
    public string? SelectedCaliber { get; set; }
    public IEnumerable<string> SelectedCategories { get; set; } = new List<string>();
    public IEnumerable<string> SelectedCalibers { get; set; } = new List<string>();
    public IEnumerable<float> SelectedVerticalRecoils { get; set; } = new List<float>();
    public float SelectedVerticalRecoil { get; set; }
    public float SelectedVelocity { get; set; }
    public int SelectedBasePrice { get; set; }
    public float SelectedAccuracyModifier { get; set; }
    public float SelectedWeight { get; set; }
    public TarkovData.TarkovItem? SelectedWeapon { get; set; }
    public List<string> Categories { get; set; } = new();
    private IEnumerable<float> SelectedWeights { get; set; } = new List<float>();
    private List<DisplaySlot> AvailableSlots { get; set; } = new List<DisplaySlot>();
    private float SelectedErgonomics { get; set; }
    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }
    private float SelectedFireRate { get; set; }
    private float SelectedCenterOfImpact { get; set; }
    private float SelectedDeviationCurve { get; set; }
    private float SelectedDeviationMax { get; set; }

    private float VerticalRecoilMin { get; set; }
    private float VerticalRecoilMax { get; set; }

    private float ErgonomicsMin { get; set; }
    private float ErgonomicsMax { get; set; }

    private float VelocityMin { get; set; }
    private float VelocityMax { get; set; }

    private int BasePriceMin { get; set; } = 0;
    private int BasePriceMax { get; set; }

    private float AccuracyModifierMin { get; set; } = 0;
    private float AccuracyModifierMax { get; set; } = 2;

    private float WeightMin { get; set; }
    private float WeightMax { get; set; }

    private float FireRateMin { get; set; }
    private float FireRateMax { get; set; }

    private float CenterOfImpactMin { get; set; }
    private float CenterOfImpactMax { get; set; }

    private float DeviationCurveMin { get; set; }
    private float DeviationCurveMax { get; set; }

    private float DeviationMaxMin { get; set; }
    private float DeviationMaxMax { get; set; }

    // Define SelectedAccuracyModifiers
    private IEnumerable<float> SelectedAccuracyModifiers { get; set; } = new List<float>();

    private TarkovData.TarkovItem.WeaponCombination? SelectedCombination { get; set; }

    private void OnCombinationSelected(TarkovData.TarkovItem.WeaponCombination combination)
    {
        SelectedCombination = combination;
        StateHasChanged(); // Trigger a UI update
    }

    private bool isDrawerOpen = false;

    private void ToggleDrawer()
    {
        isDrawerOpen = !isDrawerOpen;
    }

    private void HandleCombinationSelection(TarkovData.TarkovItem.WeaponCombination combination)
    {
        SelectedCombination = combination;
        isDrawerOpen = true; // Open the drawer
        StateHasChanged(); // Trigger a UI update
    }
    private void SetMinMaxSliders()
    {
        if (SelectedWeapon != null)
        {
            VerticalRecoilMin = SelectedWeapon.recoilVertical / 2;
            VerticalRecoilMax = SelectedWeapon.recoilVertical * 2;

            ErgonomicsMin = SelectedWeapon.ergonomics / 2;
            ErgonomicsMax = SelectedWeapon.ergonomics * 2;

            VelocityMin = SelectedWeapon.velocity / 2;
            VelocityMax = SelectedWeapon.velocity * 2;

            BasePriceMax = SelectedWeapon.basePrice * 2;

            WeightMin = SelectedWeapon.weight / 2;
            WeightMax = SelectedWeapon.weight * 2;

            FireRateMin = SelectedWeapon.fireRate / 2;
            FireRateMax = SelectedWeapon.fireRate * 2;

            CenterOfImpactMin = SelectedWeapon.centerOfImpact / 2;
            CenterOfImpactMax = SelectedWeapon.centerOfImpact * 2;

            DeviationCurveMin = SelectedWeapon.deviationCurve / 2;
            DeviationCurveMax = SelectedWeapon.deviationCurve * 2;

            DeviationMaxMin = SelectedWeapon.deviationMax / 2;
            DeviationMaxMax = SelectedWeapon.deviationMax * 2;
        }

    }

    private List<List<string>> GeneratedCombinations { get; set; } = new();

    private void GenerateWeaponCombinations(TarkovItem selectedWeapon)
    {
        if (selectedWeapon == null) return;

        // Clear previous combinations
        GeneratedCombinations.Clear();

        // Get the slots for the selected weapon
        if (TarkovItem.DataTableSlots.TryGetValue(selectedWeapon.id, out var weaponSlots))
        {
            foreach (var slot in weaponSlots.Values)
            {
                if (slot.required)
                {
                    // Generate combinations for the required slots
                    GeneratedCombinations.Add(slot.allowedIDs);
                }
            }
        }

        StateHasChanged(); // Update UI
    }


    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();
            Calibers = TarkovData.TarkovItem.GetDistinctCalibers();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private IEnumerable<TarkovData.TarkovItem> FilteredWeaponNames =>
    TarkovData.TarkovItem.DataTable.Values
        .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase) &&
                       (!SelectedCategories.Any() || SelectedCategories.Contains(item.categoryName)) &&
                       (!SelectedCalibers.Any() || SelectedCalibers.Contains(item.caliber)));


    private void OnSelectedCategoryChanged()
    {
        SelectedWeapons.Clear(); // Clear selected weapons to refresh the list
        StateHasChanged(); // Ensure the state is updated
        Console.WriteLine($"SelectedCategories changed to: {string.Join(", ", SelectedCategories)}");
    }

    private async Task OnSelectedWeightChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weightSelect");
        if (selectedValues.Any())
        {
            SelectedWeights = selectedValues.Select(float.Parse);
        }
        Console.WriteLine($"SelectedWeights changed to: {string.Join(", ", SelectedWeights)}");
    }

    private void UpdateAvailableSlots(TarkovData.TarkovItem selectedWeapon)
    {
        AvailableSlots.Clear();

        if (selectedWeapon != null && TarkovData.TarkovItem.DataTableSlots.TryGetValue(selectedWeapon.id, out var weaponSlots))
        {
            foreach (var slot in weaponSlots.Values)
            {
                foreach (var allowedId in slot.allowedIDs)
                {
                    var allowedItem = TarkovData.TarkovItem.DataTable.GetValueOrDefault(allowedId);
                    if (allowedItem != null)
                    {
                        AvailableSlots.Add(new DisplaySlot
                            {
                                ItemId = slot.itemId,
                                SlotId = slot.slotId,
                                SlotName = slot.name,
                                AllowedItemId = allowedItem.id,
                                AllowedItemName = allowedItem.name
                            });
                    }
                }
            }
        }
    }

    private async Task OnSelectedErgonomicsChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "ergonomicsSelect");
        if (selectedValues.Any())
        {
            SelectedErgonomics = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedErgonomics changed to: {SelectedErgonomics}");
    }

    private void OnWeaponSelected(TarkovItem weapon)
    {
        SelectedWeapon = weapon;
        GenerateWeaponCombinations(SelectedWeapon);
    }


    private void OnWeaponRowClicked(TarkovData.TarkovItem weapon)
    {
        if (SelectedWeapons.Contains(weapon.name))
        {
            SelectedWeapons.Remove(weapon.name);
        }
        else
        {
            SelectedWeapons.Add(weapon.name);
        }

        // Optionally, you could update SelectedWeapon based on last selected or other logic
        SelectedWeapon = SelectedWeapons.Any()
            ? TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.Last())
            : null;
        OnWeaponSelected(SelectedWeapon);
        UpdateAvailableSlots(SelectedWeapon);
        SetMinMaxSliders();
        StateHasChanged();
    }

    private async Task OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapons = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weaponSelect");
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        Console.WriteLine($"SelectedWeapons changed to: {string.Join(", ", SelectedWeapons)}");
    }

    private async Task OnSelectedCaliberChanged()
    {
        // Log selected calibers for debugging
        Console.WriteLine($"SelectedCalibers changed to: {string.Join(", ", SelectedCalibers)}");

        // Update filtered weapons based on selected calibers
        StateHasChanged();
    }

    private async Task OnSelectedRecoilVerticalChanged()
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "recoilVerticalSelect");
        SelectedVerticalRecoils = selectedValues.Select(float.Parse);
        Console.WriteLine($"SelectedRecoilVerticals changed to: {string.Join(", ", SelectedVerticalRecoils)}");
    }

    private async Task OnSelectedVelocityChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "velocitySelect");
        if (selectedValues.Any())
        {
            SelectedVelocity = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedVelocity changed to: {SelectedVelocity}");
    }

    private async Task OnSelectedBasePriceChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "basePriceSelect");
        if (selectedValues.Any())
        {
            SelectedBasePrice = int.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedBasePrice changed to: {SelectedBasePrice}");
    }

    private async Task OnSelectedAccuracyModifierChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "accuracyModifierSelect");
        if (selectedValues.Any())
        {
            SelectedAccuracyModifiers = selectedValues.Select(float.Parse);
        }
        Console.WriteLine($"SelectedAccuracyModifiers changed to: {string.Join(", ", SelectedAccuracyModifiers)}");
    }

    [JSInvokable]
    public void UpdateSelectedWeapons(List<string> selectedWeapons)
    {
        SelectedWeapons = selectedWeapons;
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        StateHasChanged();
    }

    public class DisplaySlot
    {
        public string ItemId { get; set; }
        public string SlotId { get; set; }
        public string SlotName { get; set; }
        public string AllowedItemId { get; set; }
        public string AllowedItemName { get; set; }
    }
}
