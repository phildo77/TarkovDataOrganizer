@page "/gun-configurator"
@using Microsoft.JSInterop
@using TarkovDataOrganizer

<script>
    function getSelectedValues(selectId) {
        var select = document.getElementById(selectId);
        var selectedValues = [];
        for (var i = 0; i < select.options.length; i++) {
            if (select.options[i].selected) {
                selectedValues.push(select.options[i].value);
            }
        }
        return selectedValues;
    }

    function toggleSelection(rowId) {
        var row = document.getElementById(rowId);
        row.classList.toggle('selected');

        var selectedValues = [];
        var selectedRows = document.querySelectorAll('.weapon-row.selected');
        selectedRows.forEach(row => {
            selectedValues.push(row.getAttribute('data-value'));
        });

        DotNet.invokeMethodAsync('YourAssemblyName', 'UpdateSelectedWeapons', selectedValues);
    }
</script>

<style>
    .weapon-image-container {
        display: flex;
        flex-direction: column;
        height: 100px;
        overflow-y: scroll;
    }

    .weapon-image {
        width: 50px;
        height: 50px;
        margin: 5px;
    }

    .weapon-table {
        width: 100%;
    }

    .weapon-table-td {
        height: 79px;
        display: flex;
        overflow-y: scroll;
    }

    .weapon-row {
        cursor: pointer;
    }

        .weapon-row.selected {
            background-color: #d3d3d3; /* Highlight selected row */
        }
</style>

<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{
    <table>
        <thead>
            <tr>
                <th>Category</th>
                <th>Weapon</th>
                <th>Caliber</th>
                @if (!string.IsNullOrEmpty(SelectedWeapon))
                {
                    <th>Recoil</th>
                    <th>Velocity</th>
                    <th>Base Price</th>
                }
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <select id="categorySelect" multiple @onchange="OnSelectedCategoryChanged">
                        @foreach (var category in Categories)
                        {
                            <option value="@category" selected="@SelectedCategories.Contains(category)">@category</option>
                        }
                    </select>
                </td>
                <td class="weapon-table-td">
                    <table class="weapon-table">
                        @foreach (var weapon in FilteredWeaponNames)
                        {
                            <tr id="weapon-@weapon.shortName" class="weapon-row" data-value="@weapon.shortName" @onclick="() => OnWeaponRowClicked(weapon.name)">
                                <td>
                                    <img src="@weapon.defaultPresetGridImageLink" alt="@weapon.shortName" class="weapon-image" />
                                    @weapon.shortName
                                </td>
                            </tr>
                        }
                    </table>
                </td>
                <td>
                    <select id="caliberSelect" multiple @onchange="OnSelectedCaliberChanged">
                        @foreach (var caliber in Calibers)
                        {
                            <option value="@caliber" selected="@SelectedCalibers.Contains(caliber)">@caliber</option>
                        }
                    </select>
                </td>
                @if (!string.IsNullOrEmpty(SelectedWeapon))
                {
                    <td>
                        <select id="recoilVerticalSelect" multiple @onchange="OnSelectedRecoilVerticalChanged">
                            @if (SelectedWeapon != null)
                            {
                                var selectedWeaponDataRecoil = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapon);
                                if (selectedWeaponDataRecoil != null)
                                {
                                    <option value="@selectedWeaponDataRecoil.recoilVertical">Recoil V: @selectedWeaponDataRecoil.recoilVertical</option>
                                    <option value="@selectedWeaponDataRecoil.recoilHorizontal">Recoil H: @selectedWeaponDataRecoil.recoilHorizontal</option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        <select id="velocitySelect" multiple @onchange="OnSelectedVelocityChanged">
                            @if (SelectedWeapon != null)
                            {
                                var selectedWeaponDataVelocity = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapon);
                                if (selectedWeaponDataVelocity != null)
                                {
                                    <option value="@selectedWeaponDataVelocity.velocity">Velocity: @selectedWeaponDataVelocity.velocity</option>
                                }
                            }
                        </select>
                    </td>
                    <td>
                        <select id="basePriceSelect" multiple @onchange="OnSelectedBasePriceChanged">
                            @if (SelectedWeapon != null)
                            {
                                var selectedWeaponDataPrice = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapon);
                                if (selectedWeaponDataPrice != null)
                                {
                                    <option value="@selectedWeaponDataPrice.basePrice">Base Price: @selectedWeaponDataPrice.basePrice.ToString("C0")</option>
                                }
                            }
                        </select>
                    </td>
                }
            </tr>
        </tbody>
    </table>

    @if (!string.IsNullOrEmpty(SelectedWeapon))
    {
        var selectedWeaponData = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapon);
        if (selectedWeaponData != null)
        {
            <div id="weaponDisplay">
                <h3>@selectedWeaponData.name</h3>
                <img id="weaponImage" src="@selectedWeaponData.defaultPresetBaseImageLink" alt="Selected Weapon Image" />
                <p>Recoil Vertical: @selectedWeaponData.recoilVertical</p>
                <p>Recoil Horizontal: @selectedWeaponData.recoilHorizontal</p>
                <p>Velocity: @selectedWeaponData.velocity</p>
                <p>Base Price: @selectedWeaponData.basePrice</p>
            </div>
        }
    }
}

@code {
    private List<string> Calibers = new List<string>();
    private List<float> RecoilVerticals = new List<float>();
    public List<string> SelectedWeapons { get; set; } = new List<string>();
    public List<string> SelectedCategories { get; set; } = new List<string>();
    public List<string> SelectedCalibers { get; set; } = new List<string>();
    public List<float> SelectedRecoilVerticals { get; set; } = new List<float>();
    public float SelectedVelocity { get; set; }
    public int SelectedBasePrice { get; set; }
    public string? SelectedWeapon { get; set; }
    public List<string> Categories { get; set; } = new();

    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();
            Calibers = TarkovData.TarkovItem.GetDistinctCalibers();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private IEnumerable<TarkovData.TarkovItem> FilteredWeaponNames =>
        !SelectedCategories.Any()
            ? TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase))
            : TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase) &&
                               SelectedCategories.Contains(item.categoryName));

    private async Task OnSelectedCategoryChanged(ChangeEventArgs e)
    {
        SelectedCategories = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "categorySelect");
        SelectedWeapons.Clear(); // Clear selected weapons to refresh the list
        StateHasChanged(); // Ensure the state is updated
        Console.WriteLine($"SelectedCategories changed to: {string.Join(", ", SelectedCategories)}");
    }

    private async Task OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapons = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weaponSelect");
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = SelectedWeapons.First();
        }
        Console.WriteLine($"SelectedWeapons changed to: {string.Join(", ", SelectedWeapons)}");
    }

    private async Task OnSelectedCaliberChanged(ChangeEventArgs e)
    {
        SelectedCalibers = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "caliberSelect");
        Console.WriteLine($"SelectedCalibers changed to: {string.Join(", ", SelectedCalibers)}");
    }

    private async Task OnSelectedRecoilVerticalChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "recoilVerticalSelect");
        SelectedRecoilVerticals = selectedValues.Select(float.Parse).ToList();
        Console.WriteLine($"SelectedRecoilVerticals changed to: {string.Join(", ", SelectedRecoilVerticals)}");
    }

    private async Task OnSelectedVelocityChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "velocitySelect");
        if (selectedValues.Any())
        {
            SelectedVelocity = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedVelocity changed to: {SelectedVelocity}");
    }

    private async Task OnSelectedBasePriceChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "basePriceSelect");
        if (selectedValues.Any())
        {
            SelectedBasePrice = int.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedBasePrice changed to: {SelectedBasePrice}");
    }

    [JSInvokable]
    public void UpdateSelectedWeapons(List<string> selectedWeapons)
    {
        SelectedWeapons = selectedWeapons;
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = SelectedWeapons.First();
        }
        StateHasChanged();
    }

    private void OnWeaponRowClicked(string weaponName)
    {
        SelectedWeapons = new List<string> { weaponName };
        SelectedWeapon = weaponName;
        StateHasChanged();
    }
}
