@page "/gun-configurator"
@using Microsoft.JSInterop
@using MudExtensions
@using TarkovDataOrganizer

<script>
    function getSelectedValues(selectId) {
        var select = document.getElementById(selectId);
        if (select) {
            var selectedValues = [];
            for (var i = 0; i < select.options.length; i++) {
                if (select.options[i].selected) {
                    selectedValues.push(select.options[i].value);
                }
            }
            return selectedValues;
        } else {
            console.error(`Element with id ${selectId} not found.`);
            return [];
        }
    }

    function toggleSelection(rowId) {
        var row = document.getElementById(rowId);
        row.classList.toggle('selected');

        var selectedValues = [];
        var selectedRows = document.querySelectorAll('.weapon-row.selected');
        selectedRows.forEach(row => {
            selectedValues.push(row.getAttribute('data-value'));
        });

        DotNet.invokeMethodAsync('YourAssemblyName', 'UpdateSelectedWeapons', selectedValues);
    }
</script>

<style>
    .weapon-image-container {
        display: flex;
        flex-direction: column;
        height: 100px;
        overflow-y: scroll;
    }

    .weapon-image {
        width: 50px;
        height: 50px;
        margin: 5px;
    }

    .weapon-table {
        width: 100%;
    }

    .weapon-table-td {
        height: 79px;
        display: flex;
        overflow-y: scroll;
    }

    .weapon-row {
        cursor: pointer;
    }

        .weapon-row.selected {
            background-color: #d3d3d3; /* Highlight selected row */
        }
</style>

<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{
    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; padding: 16px;">
        <!-- First Pane -->
        <div>
            <table>
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Weapon</th>
                        <th>Caliber</th>
                        <th>Attachments</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <MudSelect T="string" Label="Select Categories" Variant="Variant.Filled" @bind-Value="SelectedCategory" @bind-SelectedValues="SelectedCategories" MultiSelection="true" OnClose="OnSelectedCategoryChanged">
                                @foreach (var category in Categories)
                                {
                                    <MudSelectItem T="string" Value="@category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        <td class="weapon-table-td">
                            <MudSelect Label="Select a Weapon" @bind-Value="SelectedWeapon" Variant="Variant.Filled">
                                @foreach (var weapon in FilteredWeaponNames)
                                {
                                    <MudSelectItem Value="@weapon" OnClick="() => OnWeaponRowClicked(weapon)">
                                        <div style="display: flex; align-items: center;">
                                            <img src="@weapon.defaultPresetGridImageLink" alt="@weapon.shortName" class="weapon-image" style="width: 30px; height: 30px; margin-right: 8px;" />
                                            @weapon.shortName
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        <td>
                            <MudSelect T="string" Label="Select Caliber" Variant="Variant.Filled" @bind-Value="SelectedCaliber" @bind-SelectedValues="SelectedCalibers" id="caliberSelect" MultiSelection="true" OnClose="OnSelectedCaliberChanged">
                                @foreach (var caliber in Calibers)
                                {
                                    <MudSelectItem T="string" Value="@caliber">@caliber</MudSelectItem>
                                }
                            </MudSelect>
                        </td>
                        @if (SelectedWeapon != null)
                        {
                            <td>
                                <MudSelect T="string" @bind-Value="SelectedAttachment" Variant="Variant.Filled" InputId="attachmentSelect">
                                    @foreach (var slot in AvailableSlots)
                                    {
                                        <MudSelectItem Value="@slot.AllowedItemId">@slot.SlotName: @slot.AllowedItemName</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Second Pane -->
        <div>
            <table>
                <thead>
                    <tr>
                        @if (SelectedWeapon != null)
                        {
                            <th>Recoil</th>
                            <th>Ergo</th>
                            <th>Velocity</th>
                            <th>Base Price</th>
                            <th>Accuracy Modifier</th>
                            <th>Weight</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        @if (SelectedWeapon != null)
                        {
                            <td>
                                <MudSelect T="float" @bind-Value="SelectedVerticalRecoil" @bind-SelectedValues="SelectedVerticalRecoils" Variant="Variant.Filled" InputId="recoilVerticalSelect" MultiSelection="true">
                                    @if (!SelectedVerticalRecoils.Contains(SelectedWeapon.recoilVertical))
                                    {
                                        SelectedVerticalRecoils = SelectedVerticalRecoils.Append(SelectedWeapon.recoilVertical);
                                    }
                                    <MudSelectItem Value="@SelectedWeapon.recoilVertical">Recoil V: @SelectedWeapon.recoilVertical</MudSelectItem>
                                </MudSelect>
                            </td>
                            <td>
                                <MudSlider T="float" Min="@(SelectedWeapon.ergonomics / 2)" Max="@(SelectedWeapon.ergonomics * 2)" Step="1" @bind-Value="SelectedErgonomics" Variant="Variant.Filled" />
                                <p>Ergonomics: @SelectedErgonomics</p>
                            </td>
                            <td>
                                <MudSlider T="float" Min="@(SelectedWeapon.velocity / 2)" Max="@(SelectedWeapon.velocity * 2)" Step="10" @bind-Value="SelectedVelocity" Variant="Variant.Filled" />
                                <p>Velocity: @SelectedVelocity</p>
                            </td>
                            <td>
                                <MudSlider @bind-Value="SelectedBasePrice"
                                           Min="0" Max="@(SelectedWeapon.basePrice * 2)" Step="100"
                                           Variant="Variant.Filled"
                                           ValueLabelFormat="C2" />
                                <p>basePrice: @($"{SelectedBasePrice:C2}")</p>

                            </td>
                            <td>
                                <MudSelect T="float" @bind-SelectedValues="SelectedAccuracyModifiers" Variant="Variant.Filled" InputId="accuracyModifierSelect" MultiSelection="true">
                                    <MudSelectItem Value="@SelectedWeapon.accuracyModifier">Accuracy Modifier: @SelectedWeapon.accuracyModifier</MudSelectItem>
                                </MudSelect>
                            </td>
                            <td>
                                <MudSelect T="float" @bind-SelectedValues="SelectedWeights" Variant="Variant.Filled" InputId="weightSelect" MultiSelection="true">
                                    @if (SelectedWeapon.weight > 0)
                                    {
                                        <MudSelectItem Value="@SelectedWeapon.weight">Weight: @SelectedWeapon.weight</MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Third Pane -->
    <div style="padding: 16px;">
        @if (SelectedWeapon != null)
        {
            <div id="weaponDisplay">
                <h3>@SelectedWeapon.name</h3>
                <img id="weaponImage" src="@SelectedWeapon.defaultPresetBaseImageLink" alt="Selected Weapon Image" />
                <p>Recoil Vertical: @SelectedWeapon.recoilVertical</p>
                <p>Recoil Horizontal: @SelectedWeapon.recoilHorizontal</p>
                <p>Velocity: @SelectedWeapon.velocity</p>
                <p>Base Price: @SelectedWeapon.basePrice</p>
                <p>Accuracy Modifier: @SelectedWeapon.accuracyModifier</p>
                <p>Weight: @SelectedWeapon.weight</p>
            </div>
        }
    </div>
}

@code {
    private List<string> Calibers = new List<string>();
    private List<float> RecoilVerticals = new List<float>();
    public List<string> SelectedWeapons { get; set; } = new List<string>();
    public string? SelectedCategory { get; set; }
    public string? SelectedAttachment { get; set; }
    public string? SelectedCaliber { get; set; }
    public IEnumerable<string> SelectedCategories { get; set; } = new List<string>();
    public IEnumerable<string> SelectedCalibers { get; set; } = new List<string>();
    public IEnumerable<float> SelectedVerticalRecoils { get; set; } = new List<float>();
    public float SelectedVerticalRecoil { get; set; }
    public float SelectedVelocity { get; set; }
    public int SelectedBasePrice { get; set; }
    public float SelectedAccuracyModifier { get; set; }
    public float SelectedWeight { get; set; }
    public TarkovData.TarkovItem? SelectedWeapon { get; set; }
    public List<string> Categories { get; set; } = new();
    public class DisplaySlot
    {
        public string ItemId { get; set; }
        public string SlotId { get; set; }
        public string SlotName { get; set; }
        public string AllowedItemId { get; set; }
        public string AllowedItemName { get; set; }
    }
    private IEnumerable<float> SelectedWeights { get; set; } = new List<float>();

    private async Task OnSelectedWeightChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weightSelect");
        if (selectedValues.Any())
        {
            SelectedWeights = selectedValues.Select(float.Parse);
        }
        Console.WriteLine($"SelectedWeights changed to: {string.Join(", ", SelectedWeights)}");
    }


    private List<DisplaySlot> AvailableSlots { get; set; } = new List<DisplaySlot>();

    private void UpdateAvailableSlots(TarkovData.TarkovItem selectedWeapon)
    {
        AvailableSlots.Clear();

        if (selectedWeapon != null && TarkovData.TarkovItem.DataTableSlots.TryGetValue(selectedWeapon.id, out var weaponSlots))
        {
            foreach (var slot in weaponSlots.Values)
            {
                foreach (var allowedId in slot.allowedIDs)
                {
                    var allowedItem = TarkovData.TarkovItem.DataTable.GetValueOrDefault(allowedId);
                    if (allowedItem != null)
                    {
                        AvailableSlots.Add(new DisplaySlot
                            {
                                ItemId = slot.itemId,
                                SlotId = slot.slotId,
                                SlotName = slot.name,
                                AllowedItemId = allowedItem.id,
                                AllowedItemName = allowedItem.name
                            });
                    }
                }
            }
        }
    }


    private float SelectedErgonomics { get; set; }

    private async Task OnSelectedErgonomicsChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "ergonomicsSelect");
        if (selectedValues.Any())
        {
            SelectedErgonomics = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedErgonomics changed to: {SelectedErgonomics}");
    }


    private void OnWeaponRowClicked(TarkovData.TarkovItem weapon)
    {
        SelectedWeapons = new List<string> { weapon.name };
        SelectedWeapon = weapon;
        UpdateAvailableSlots(SelectedWeapon); // Update available slots
        StateHasChanged();
    }




    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();
            Calibers = TarkovData.TarkovItem.GetDistinctCalibers();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private IEnumerable<TarkovData.TarkovItem> FilteredWeaponNames =>
        !SelectedCategories.Any()
            ? TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase))
            : TarkovData.TarkovItem.DataTable.Values
                .Where(item => item.types.Split('|').Contains("gun", StringComparer.OrdinalIgnoreCase) &&
                               SelectedCategories.Contains(item.categoryName));

    private void OnSelectedCategoryChanged()
    {
        SelectedWeapons.Clear(); // Clear selected weapons to refresh the list
        StateHasChanged(); // Ensure the state is updated
        Console.WriteLine($"SelectedCategories changed to: {string.Join(", ", SelectedCategories)}");
    }

    private async Task OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapons = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "weaponSelect");
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        Console.WriteLine($"SelectedWeapons changed to: {string.Join(", ", SelectedWeapons)}");
    }

    private async Task OnSelectedCaliberChanged()
    {
        SelectedCalibers = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "caliberSelect");
        Console.WriteLine($"SelectedCalibers changed to: {string.Join(", ", SelectedCalibers)}");
    }

    private async Task OnSelectedRecoilVerticalChanged()
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "recoilVerticalSelect");
        SelectedVerticalRecoils = selectedValues.Select(float.Parse);
        Console.WriteLine($"SelectedRecoilVerticals changed to: {string.Join(", ", SelectedVerticalRecoils)}");
    }

    private async Task OnSelectedVelocityChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "velocitySelect");
        if (selectedValues.Any())
        {
            SelectedVelocity = float.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedVelocity changed to: {SelectedVelocity}");
    }

    private async Task OnSelectedBasePriceChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "basePriceSelect");
        if (selectedValues.Any())
        {
            SelectedBasePrice = int.Parse(selectedValues.First());
        }
        Console.WriteLine($"SelectedBasePrice changed to: {SelectedBasePrice}");
    }
    private IEnumerable<float> SelectedAccuracyModifiers { get; set; } = new List<float>();

    private async Task OnSelectedAccuracyModifierChanged(ChangeEventArgs e)
    {
        var selectedValues = await JSRuntime.InvokeAsync<List<string>>("getSelectedValues", "accuracyModifierSelect");
        if (selectedValues.Any())
        {
            SelectedAccuracyModifiers = selectedValues.Select(float.Parse);
        }
        Console.WriteLine($"SelectedAccuracyModifiers changed to: {string.Join(", ", SelectedAccuracyModifiers)}");
    }

    [JSInvokable]
    public void UpdateSelectedWeapons(List<string> selectedWeapons)
    {
        SelectedWeapons = selectedWeapons;
        if (SelectedWeapons.Any())
        {
            SelectedWeapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapons.First());
        }
        StateHasChanged();
    }
}
