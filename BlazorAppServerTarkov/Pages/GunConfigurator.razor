@page "/gun-configurator"
@using TarkovDataOrganizer
<h3>Gun Configurator</h3>

@if (IsLoading)
{
    <p>Loading, please wait...</p>
}
else if (ErrorMessage != null)
{
    <p style="color:red">@ErrorMessage</p>
}
else
{
    <select @onchange="OnSelectedCategoryChanged">
        @foreach (var category in Categories)
        {
            <option value="@category">@category</option>
        }
    </select>

    <select @onchange="OnSelectedWeaponChanged">
        @foreach (var item in FilteredWeaponNames)
        {
            var weapon = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == item);
            if (weapon != null)
            {
                <option value="@item">@item</option>
            }
        }
    </select>

    @if (!string.IsNullOrEmpty(SelectedWeapon))
    {
        var selectedWeaponData = TarkovData.TarkovItem.DataTable.Values.FirstOrDefault(w => w.name == SelectedWeapon);
        if (selectedWeaponData != null)
        {
            <div id="weaponDisplay">
                <img id="weaponImage" src="@selectedWeaponData.gridImageLink" alt="Selected Weapon Image" />
            </div>
        }
    }
}

@code {
    private List<string> WeaponNames = new List<string>();
    public string? SelectedWeapon { get; set; }
    public string? SelectedCategory { get; set; }
    public List<string> Categories { get; set; } = new();

    private bool IsLoading { get; set; } = true;
    private string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await TarkovData.TarkovItem.DownloadTable();
            Categories = TarkovData.TarkovItem.GetDistinctCategories();

            var csvContent = await File.ReadAllTextAsync(Path.Combine(Environment.CurrentDirectory, "wwwroot", "testReportAllCombos.csv"));
            WeaponNames = ParseCsv(csvContent);

            // Set selected weapon Component initialization to properly show image and UI updates
            var firstWeaponInCategory = FilteredWeaponNames.ToArray()[1].ToString();
            SelectedWeapon = firstWeaponInCategory;

        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private List<string> ParseCsv(string csvContent)
    {
        var lines = csvContent.Split('\n');
        var itemNames = new List<string>();

        foreach (var line in lines.Skip(1)) // Skip header
        {
            var columns = line.Split(',');
            if (columns.Length > 3) // Ensure there are enough columns
            {
                itemNames.Add(columns[3].Trim());
            }
        }

        return itemNames;
    }

    private IEnumerable<string> FilteredWeaponNames =>
        string.IsNullOrEmpty(SelectedCategory)
            ? WeaponNames.Distinct(StringComparer.OrdinalIgnoreCase)
            : WeaponNames
                .Where(item => item.Contains(SelectedCategory, StringComparison.OrdinalIgnoreCase))
                .Distinct(StringComparer.OrdinalIgnoreCase);

    private void OnSelectedWeaponChanged(ChangeEventArgs e)
    {
        SelectedWeapon = e.Value?.ToString();
        Console.WriteLine($"SelectedWeapon changed to: {SelectedWeapon}");
    }

    private void OnSelectedCategoryChanged(ChangeEventArgs e)
    {
        SelectedCategory = e.Value?.ToString();
        Console.WriteLine($"SelectedCategory changed to: {SelectedCategory}");
        // Reset selected weapon and select the first available weapon in the new category, if any
        var firstWeaponInCategory = FilteredWeaponNames.FirstOrDefault();
        SelectedWeapon = firstWeaponInCategory;
        Console.WriteLine($"SelectedWeapon reset to: {SelectedWeapon}");
    }
}
